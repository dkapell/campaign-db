mixin characterModal()
    .modal.fade#characterModal(role="dialog" tabindex="-1" aria-labelledby="popupModalLabel" aria-hidden="true")
        .modal-dialog.modal-lg.modal-dialog-centered(role="document")
            .modal-content.vh-75
                .modal-header
                    h5.modal-title
                    button.btn-close#dismissPopupModal(type="button", data-bs-dismiss="modal" area-label="Close")
                .modal-body
                .modal-footer
                    button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Cancel
                    button.btn.btn-primary.save-btn(type="submit") Save

mixin characterSkill(skill, showDescription=false, showSource=false, showUsage=false, renames=[])
    -
        if (currentCampaign){
            renames = currentCampaign.renames
        }
    .character-skill
        .row
            .col-md-8.skill-name
                i.me-2= skill.name
                if skill.count > 1 && !skill.usage.display_uses
                    span.me-2 (X#{skill.count})
                for tag in skill.tags
                    if tag.display_to_pc && tag.on_sheet
                        -const tagClass = tag.color?`text-bg-${tag.color}`:'text-bg-info'
                        .badge.me-1(class=tagClass)= tag.name
            .col-md-1.skill-cost
                if _.has(skill, 'character_cost')
                    if skill.character_cost
                        | #{skill.character_cost} #{renames.cp.singular}
                else
                    | #{skill.next_cost} #{renames.cp.singular}

            .col.float-end.text-end
                if showUsage
                    span.skill-usage=skill.usage?skill.usage.name:''
                if showSource
                    strong.ms-4.skill-source= skill.source.name

        .row.skill-summary
            .col
                p.my-1
                    if skill.usage.display_uses && skill.uses
                        strong.skill-usages.me-1 #{(skill.count?skill.count:1) * skill.uses}/#{skill.usage.usage_format}:

                    !=marked.parseInline(skill.summary)
        if skill.description
            .row.skill-description(style=showDescription?'':'display:none')
                .col
                    p.my-1!=marked.parseInline(skill.description, {breaks: true})
        if skill.details
            if skill.details.sheet_note
                .row.skill-sheet-note
                    .col
                        p.my-1.py-1.alert.alert-light
                            strong.me-1 Sheet Note:
                            i=skill.details.sheet_note

            if skill.details.notes
                .row.skill-note
                    .col
                        p.my-1.py-1.alert.alert-light
                            strong.me-1 Note:
                            !=marked.parseInline(skill.details.notes, {breaks: true})


mixin characterSource(source, renames)
    -
        if (currentCampaign){
            renames = currentCampaign.renames
        }

    .character-source
        .row
            .col-md-8.source-name
                i.me-2= source.name
                if source.required
                    .badge.text-bg-info.me-1 required
            .col.source-cost #{source.cost} #{renames.cp.singular}

            .col.float-end.text-end.source-type
                strong= capitalize(source.type.name)
        if source.description
            .row.source-description
                .col
                    p.my-1!=marked.parseInline(source.description, {breaks: true})

mixin characterSheet(character, renames)
    -
        if (currentCampaign){
            renames = currentCampaign.renames
        }
    .row
        .col-md-4.mt-4
            if character.provides.attributes.length
                .card.mb-3
                    h5.py-2.card-header Attributes
                    ul.card-text.list-group.list-group-flush
                        each attribute in character.provides.attributes
                            li.py-2.list-group-item(class=attribute.name.match(/^Unset/)?'text-danger':'')
                                if attribute.name.match(/^Unset/)
                                    i.fas.fa-exclamation-triangle.me-1
                                =attribute.name
                                span.ms-1.float-end
                                    if typeof attribute.value === 'object'
                                        i= attribute.value.join(', ')
                                    else
                                        = attribute.value

            if _.keys(character.provides.traits).length
                each traits, type in character.provides.traits
                    .card.mb-3
                        h5.py-2.card-header #{type} Traits
                        ul.card-text.list-group.list-group-flush
                            each trait in traits
                                li.py-2.list-group-item(class=trait.match(/^Unset/)?'text-danger':'')
                                    if trait.match(/^Unset/)
                                        i.fas.fa-exclamation-triangle.me-1
                                    =trait

            if character.provides.languages.length
                .card.mb-3
                    h5.py-2.card-header Languages
                    ul.card-text.list-group.list-group-flush
                        each language in character.provides.languages
                            li.py-2.list-group-item(class=language.match(/^Unset/)?'text-danger':'')
                                if language.match(/^Unset/)
                                    i.fas.fa-exclamation-triangle.me-1
                                =language

            if character.provides.tagskills.length
                .card.mb-3
                    h5.py-2.card-header Tag Reading Skills
                    ul.card-text.list-group.list-group-flush
                        each tagskill in character.provides.tagskills
                            li.py-2.list-group-item=tagskill

            if character.provides.diagnose.length
                .card.mb-3
                    h5.py-2.card-header Diagnose
                    .card-body.py-0.my-0.mx-1.px-2
                        ul.row.list-unstyled.my-0.py-0.trait-list
                            each trait, idx in character.provides.diagnose
                                - const bBordered = Math.floor(idx / 3) < Math.floor(character.provides.diagnose.length/3);
                                - const eBordered = !!((idx+1) % 3 )
                                li.list-item.col-sm-4.py-2.text-center(class=bBordered?'border-bottom':'' class=eBordered?'border-end':'')=trait

            if _.keys(character.provides.styles).length

                .card.mb-3
                    h5.py-2.card-header Weapon Styles
                    ul.card-text.list-group.list-group-flush

                        each count, style in character.provides.styles
                            li.py-2.list-group-item(class=style.match(/^Unset/)?'text-danger':'')
                                if style.match(/^Unset/)
                                    i.fas.fa-exclamation-triangle.me-1
                                =style
                                if count > 1
                                    |  (#{count})

            if _.keys(character.provides.crafting).length
                .card.mb-3
                    h5.py-2.card-header Crafting Skills
                    ul.card-text.list-group.list-group-flush
                        each val, type in character.provides.crafting
                            li.py-2.list-group-item=capitalize(type)
                                span.ms-1.float-end= val

            .card.mb-3
                h5.py-2.card-header Headers
                ul.card-text.list-group.list-group-flush
                    each source in character.sources
                        if !source.type.display_on_sheet
                            - continue
                        li.py-2.list-group-item=source.name
                            if source.character_cost
                                span.ms-1.float-end #{source.character_cost} #{renames.cp.singular}

        .col-md
            .row
                .col-md
                    .form-check.form-switch.pt-0.form-check-reverse.me-2
                        input.form-check-input#showGameRules(type="checkbox")
                        label.form-check-label(for="showGameRules") Show Game Rules
                .col-md
                    .form-check.form-switch.pt-0.form-check-reverse
                        input.form-check-input#showSkillDescriptions(type="checkbox" checked)
                        label.form-check-label(for="showSkillDescriptions") Show Skill Descriptions
            if character.provides.rules.length
                .row#gameRuleList(style='display:none')
                    .col
                        .card.mb-3
                            h5.py-2.card-header Game Rules
                            ul.card-text.list-group.list-group-flush
                                each skill in character.provides.rules
                                    li.list-group-item.py-1
                                        +characterSkill(skill, false, false, false, renames)
            .row
                .col
                    -
                        const skills_filtered = _.reject(character.provides.skills, function(skill){
                            return _.has(skill.details, 'hide_on_sheet') && skill.details.hide_on_sheet;
                        })

                        const grouped = _.groupBy(skills_filtered, 'usage_id')

                    each usage in skill_usages
                        - const type = usage.name
                        if _.has(grouped, usage.id)
                            - const group = grouped[usage.id];
                            .card.mb-3
                                h5.py-2.card-header #{type?group[0].usage.name:'Unset Usage'} Skills

                                -
                                    const groupReduced = group.reduce((o, e) => {
                                        const skill = _.findWhere(o, {name:e.name});
                                        if (!skill) {
                                            e.count = 1;
                                            o.push(e);
                                        } else {
                                            skill.count++;
                                        }
                                        return o;
                                    }, [])
                                ul.card-text.list-group.list-group-flush
                                    each skill in groupReduced
                                        li.list-group-item.py-1
                                            +characterSkill(skill, false, true, false, renames)



mixin characterAudits(audits, showCharacter=false)
    .table-responsive.my-0
        table.table.table-striped.character-audit-table.table-hover.my-3.dt-responsive.nowrap.table-sm.w-100
            thead
                tr
                    th(data-priority="1") Timestamp
                    if showCharacter
                        th Character
                    th User
                    th Action
                    th Change
            tbody
                for audit in audits
                    tr
                        td(data-sort=audit.created)
                            span.text-nowrap.me-1=audit.createdFormated.day
                            span.text-nowrap=audit.createdFormated.hour
                        if showCharacter
                            td=audit.object.name
                        td=audit.user.name
                        td=capitalize(audit.action)
                        td.text-wrap
                            case audit.action
                                when 'create'
                                    = audit.object.name
                                when 'clone'
                                    | From "#{audit.data.from.name}"
                                when 'update'
                                    ul.list-unstyled.my-0
                                        each change in audit.changes
                                            li
                                                strong.me-1 #{capitalize(change.field)}:
                                                if change.old
                                                    | !{change.old?marked.parseInline(change.old):'unset'} -> !{change.new?marked.parseInline(change.new):'unset'}
                                                else
                                                    | !{change.new?marked.parseInline(change.new):'unset'}

                                when 'delete'

                                when 'add skill'
                                    i= audit.data.skill.name
                                    br
                                    each change in audit.data.details
                                        strong.me-1 #{capitalize(change.field)}:
                                        | !{change.new?marked.parseInline(change.new):'unset'}
                                when 'remove skill'
                                    i= audit.data.skill.name
                                when 'update skill'
                                    i= audit.data.skill.name
                                    br
                                    each change in audit.data.details
                                        strong.me-1 #{capitalize(change.field)}:
                                        if change.old
                                            | !{change.old?marked.parseInline(change.old):'unset'} -> !{change.new?marked.parseInline(change.new):'unset'}
                                        else
                                            | !{change.new?marked.parseInline(change.new):'unset'}


                                when 'add source'
                                    strong= audit.data.source.name
                                when 'remove source'
                                    strong= audit.data.source.name

mixin characterTable(characters, type, forPlayer, showActive=false)
    .table-responsive.my-2
        .col-sm-6.offset-sm-3.text-center.table-loading
            .spinner-border.m-5(role="status" style="width: 3rem; height: 3rem;")
                .visually-hidden Table is Loading
        table.table.table-striped.data-table.table-hover.my-3.dt-responsive.nowrap.table-sm.w-100(
            data-order=forPlayer?'[[2, "desc"]]':'[[1, "asc"]]'
            style="display: none"
            data-export=`/character?export=true&type=${type}${showActive?'&inactive=true':''}`
            class=!forPlayer?'table-exportable':''
            )
            thead
                tr
                    th
                    if checkPermission('contrib') && !forPlayer
                        th Player
                    th(data-priority="1") Name
                    if showActive
                        th(data-priority="3") Active
                    th #{currentCampaign.renames.cp.singular}
                    th(data-priority="3") Updated
                    th(data-priority="2").col-1

            tbody
                for character in characters
                    tr(class='clickable-row', data-click-object='character' data-click-id=character.id)
                        td.dtr-control
                        if checkPermission('contrib') && !forPlayer
                            td
                                a.action-btn(href=`/user/${character.user.id}`)
                                    i.fas.fa-user.me-1
                                    = character.user.name
                        td
                            i.far.fa-user.me-1
                            = character.name
                        if showActive
                            td
                                if character.active
                                    .badge.text-bg-success.badge-pill Active
                        td= character.cp
                        td(data-sort=moment(character.updated).unix())= moment(character.updated).format('MMM Do YYYY, h:mm a')
                        td
                            a.btn.btn-outline-info.btn-xs.action-btn.me-1(
                                role="button",
                                title="View/Edit Character"
                                data-bs-toggle="tooltip"
                                href=`/character/${character.id}`
                            )
                                i.fas.fa-edit.fa-fw
                            a.btn.btn-outline-success.btn-xs.clone-btn.action-btn.me-1(
                                role="button",
                                data-bs-toggle="tooltip"
                                title='Duplicate Character'
                                data-characterid=character.id
                                data-csrf=csrfToken
                            )
                                i.fas.fa-copy.fa-fw
                            if checkPermission('gm') || activeUser.id === character.user_id
                                a.btn.btn-outline-danger.btn-xs.delete-btn(
                                    role="button",
                                    title="Delete Character"
                                    data-bs-toggle="tooltip"
                                    url=`/character/${character.id}`
                                )
                                    i.fas.fa-trash.fa-fw
mixin characterCard(character)
    if character
        .card
            .card-header
                .float-end
                    a.btn.btn-sm.btn-outline-info(href=`/character/${character.id}` title='View Character')
                        i.fas.fa-eye
                .d-block
                    h4.d-inline= character.name
                        h3.align-text-top.d-inline.badge.rounded-pill.text-bg-info.ms-3 #{character.cp} #{currentCampaign.renames.cp.singular}

            .card-body

                dl.row
                    -
                        const sources = _.groupBy(character.sources, (item) => {
                            if (!item.type.display_on_sheet){
                                return 'skip';
                            }
                            return item.type.name
                        });
                    each source,name in sources
                        if name === 'skip'
                            - continue
                        dt.col-sm-4=  capitalize(name)
                        dd.col-sm-8.mb-0= _.pluck(source, 'name').join(', ')



mixin characterList(characters, forPlayer=false, extended=false, showActive=false, renames=[])
    -
        if (currentCampaign){
            renames = currentCampaign.renames
        }
    ul.list-group
        each character in characters
            +characterListItem(character, forPlayer, extended, showActive, renames)

mixin characterListItem(character, forPlayer, extended, showActive, renames)
    li.list-group-item.py-2(href=`/character/${character.id}`)
        .row
            .col
                a(href=`/character/${character.id}` style='font-size: 1rem')
                    i.far.fa-user.me-1
                    = character.name
                if character.pronouns
                    span.ms-2 (#{character.pronouns})
                if showActive && character.active
                    .badge.text-bg-success.badge-pill.ms-1 Active
            .col-1
                small #{character.cp}&nbsp;#{renames.cp.singular}
            if !forPlayer
                .col-4
                    a(href=`/user/${character.user.id}`)
                        i.fas.fa-user.me-1
                        =character.user.name
        if extended
            .row.mt-1
                .col
                    | Updated: #{moment(character.updated).format('MMM Do YYYY, h:mm a')}
                .col.text-end
                    a.btn.btn-outline-info.btn-xs.action-btn.me-1(
                        role="button",
                        title="View/Edit Character"
                        data-bs-toggle="tooltip"
                        href=`/character/${character.id}`
                    )
                        i.fas.fa-edit.fa-fw
                    a.btn.btn-outline-success.btn-xs.clone-btn.action-btn.me-1(
                        role="button",
                        data-bs-toggle="tooltip"
                        title='Duplicate Character'
                        data-characterid=character.id
                        data-csrf=csrfToken
                    )
                        i.fas.fa-copy.fa-fw
                    if checkPermission('gm') || activeUser.id === character.user_id
                        a.btn.btn-outline-danger.btn-xs.delete-character-btn(
                            role="button",
                            title="Delete Character"
                            data-bs-toggle="tooltip"
                            url=`/character/${character.id}`
                        )
                            i.fas.fa-trash.fa-fw

mixin characterListDisplay(characters, type, forPlayer=false, extended=false, showActive=false)
    .d-lg-none
        +characterList(characters, forPlayer, extended, showActive)
    .d-none.d-lg-block
        +characterTable(characters, type, forPlayer, showActive)

mixin edit_skill_details(character_skill)
    if !character_skill.provides_data || character_skill.provides_data.skill
        #skill-details-on-sheet-options
            .row.my-2
                .col
                    .form-check.form-switch
                        input.form-check-input#character_skill_hide_on_sheet(type="checkbox", name="character_skill[details][hide_on_sheet]" checked=character_skill.details.hide_on_sheet)
                        label.form-check-label(for="character_skill_hide_on_sheet") Do not display in list of Skills on Character Sheet

            .row.my-2
                .col
                    label.control-label(for="skill-character_skill_sheet_note") Character Sheet Note (for Character Sheet, i.e. verbal)
                    input.form-control#character_skill_sheet_note(type="text",placeholder="Note for Character Sheet" name="character_skill[details][sheet_note]" value=character_skill.details.sheet_note)
    .row.my-2
        .col
            label.control-label(for="skill-character_skill_notes") Skill Notes
            +markdownEditor('Notes', 'character_skill_notes', 'character_skill[details][notes]', 5, 100, character_skill.details.notes, true)


