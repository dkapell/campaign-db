mixin sourceDoc(source, backto)
    - const showSource = sourceCheck(source)

    if showSource.show
        .row
            .col
                h1.h3(id=`source-${source.id}`)

                    if checkPermission('gm')
                        a.text-reset.source-name(href=`/skill_source/${source.id}/edit?backto=${backto}` data-bs-toggle='tooltip' title='Edit Source')
                            | #{source.name}
                    else
                        span.source-name #{source.name}
                    if source.cost
                        span.ms-2 (#{source.cost} #{currentCampaign.renames.cp.singular})
                    if showSource.unlocked
                        i.fas.fa-unlock.ms-2
            .col
                strong.h4.float-end #{capitalize(source.type.name)}

        if (source.requires && source.requires.length)
            p.my-1
                strong.me-1 Requires
                    if _.uniq(_.pluck(source.requires, 'name')).length > 1
                        |  #{source.require_num} of:

                if _.uniq(_.pluck(source.requires, 'name')).length === 1
                    a.text-body.skill-link.d-inline(href=`#source-${source.requires[0].id}`) #{source.requires[0].name}

                else
                    each requires, idx in source.requires
                        if (idx === source.requires.length -1)
                            a.text-body.skill-link.d-inline(href=`#source-${requires.id}`) #{requires.name}
                        else
                            a.text-body.skill-link.d-inline.me-1(href=`#source-${requires.id}`) #{requires.name},

        if (source.conflicts && source.conflicts.length)
            p.my-1
                strong.me-1 Conflicts with:
                if _.uniq(_.pluck(source.conflicts, 'name')).length === 1
                    a.text-body.skill-link.d-inline(href=`#source-${source.conflicts[0].id}`) #{source.conflicts[0].name}
                else
                    each conflict, idx in source.conflicts
                        if (idx === source.conflicts.length -1)
                            a.text-body.skill-link.d-inline(href=`#source-${conflict.id}`) #{conflict.name}
                        else
                            a.text-body.skill-link.d-inline.me-1(href=`#source-${conflict.id}`) #{conflict.name},




        if source.description
            .source-description !{marked.parse(source.description, {breaks: true})}
        if checkPermission('gm') && source.notes
            h2 GM Notes
            .source-notes !{marked.parse(source.notes, {breaks: true})}

        h2.h4 Skills
            if source.max_skills
                span.ms-2.h5 (Max #{source.max_skills})
        ul.list-unstyled.ms-4
            for skill in source.skills
                - const showSkill = skillCheck(skill)
                if showSkill.show
                    li
                        a.text-body.skill-link(href=`#skill-${skill.id}`)
                            if showSkill.unlocked
                                i.fas.fa-unlock.me-1
                            strong #{skill.name==='TBD'?'Unnamed Skill':skill.name} (#{skill.cost||'Unset'} cp)
                            if !(skill.status.complete && skill.status.display_to_pc && skill.status.purchasable)
                                if checkPermission('contrib')
                                    span.badge.ms-2(
                                        class=`text-bg-${skill.status?skill.status.class:'danger'}`
                                        title=skill.status?skill.status.description:''
                                        data-bs-toggle="tooltip"
                                    )= skill.status?skill.status.name:'Unknown'
                                else
                                    span.badge.ms-2(
                                        class=`text-bg-${skill.status?skill.status.class:'danger'}`
                                    )= skill.status?skill.status.name:'Unknown'

        +skillList(source.skills, backto)



mixin skillList(skills, backto)
    for skill in skills
        - const showSkill = skillCheck(skill)
        if showSkill.show
            - skill.unlocked = showSkill.unlocked
            +skillDoc(skill, backto)



mixin skillDoc(skill, backto)
    h2.h5(id=`skill-${skill.id}`)
        if skill.unlocked
            i.fas.fa-unlock.me-1
        if checkPermission('gm')
            a.text-reset.skill-name(href=`/skill/${skill.id}/edit?backto=${backto}` data-bs-toggle='tooltip' title='Edit Skill')
                if skill.name==='TBD'
                    i.skill-name Unnamed Skill
                else
                    span.skill-name= skill.name
        else
            if skill.name==='TBD'
                i.skill-name Unnamed Skill
            else
                span.skill-name= skill.name
        if (skill.cost)
                span.skill-cost.ms-2 (#{skill.cost} cp)
        if !(skill.status.complete && skill.status.display_to_pc && skill.status.purchasable)
            if checkPermission('contrib')
                span.badge.float-end(
                    class=`text-bg-${skill.status?skill.status.class:'danger'}`
                    title=skill.status?skill.status.description:''
                    data-bs-toggle="tooltip"
                )= skill.status?skill.status.name:'Unknown'
            else
                span.badge.float-end(
                    class=`text-bg-${skill.status?skill.status.class:'danger'}`
                )= skill.status?skill.status.name:'Unknown'


    .skill-attributes
        if (skill.usage && skill.usage.display_name)
            span.skill-usage.me-2.d-inline Usage: #{skill.usage.name}
        if skill.required
            span.skill-tag.me-2.d-inline [ required ]
        if (skill.tags)
            for tag in skill.tags
                if checkPermission('contrib') || tag.display_to_pc
                    span.skill-tag.me-2.d-inline [ #{tag.name} ]

    .skill-summary
        if skill.usage && skill.usage.display_uses && skill.uses
            strong.me-1 #{skill.uses}/#{skill.usage.usage_format}:

        | !{marked.parseInline(skill.summary)}

    if (skill.requires && skill.requires.length)
        p.my-1
            strong.me-1 Requires
                if _.uniq(_.pluck(skill.requires, 'name')).length > 1
                    |  #{skill.require_num} of:

            if _.uniq(_.pluck(skill.requires, 'name')).length === 1
                a.text-body.skill-link.d-inline(href=`#skill-${skill.requires[0].id}`) #{skill.requires[0].name}
            else
                each requires, idx in skill.requires
                    if (idx === skill.requires.length -1)
                        a.text-body.skill-link.d-inline(href=`#skill-${requires.id}`) #{requires.name}
                    else
                        a.text-body.skill-link.d-inline.me-1(href=`#skill-${requires.id}`) #{requires.name},


    if (skill.conflicts && skill.conflicts.length)
        p.my-1
            strong.me-1 Conflicts with:
            if _.uniq(_.pluck(skill.conflicts, 'name')).length === 1
                a.text-body.skill-link.d-inline(href=`#skill-${skill.conflicts[0].id}`) #{skill.conflicts[0].name}
            else
                each conflict, idx in skill.conflicts
                    if (idx === skill.conflicts.length -1)
                        a.text-body.skill-link.d-inline(href=`#skill-${conflict.id}`) #{conflict.name}
                    else
                        a.text-body.skill-link.d-inline.me-1(href=`#skill-${conflict.id}`) #{conflict.name},


    if skill.description
        .skill-description !{marked.parse(skill.description, {breaks: true})}
    if checkPermission('gm') && skill.notes
        strong.mb-0.mt-1.d-block GM Notes
        .skill-notes !{marked.parse(skill.notes, {breaks: true})}

append scripts
    script.
        $(function() {
            $('[data-bs-toggle="tooltip"]').tooltip({
                container: 'body',
                placement: 'right',
                delay: { "show": 500, "hide": 100 }
            });
            $('.card-entry').hover(showCardEdit, hideCardEdit);
        });

        function showCardEdit(e){
            $(this).find('.media-body').addClass('border-info')
            $(this).find('.media-body').removeClass('border-white')
            $(this).find('.card-edit-btn').removeClass('invisible');
        }
        function hideCardEdit(e){
            $(this).find('.media-body').addClass('border-white')
            $(this).find('.media-body').removeClass('border-info')
            $(this).find('.card-edit-btn').addClass('invisible');
        }

