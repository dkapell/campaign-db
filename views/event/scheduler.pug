extends ../layout-flex
include ../partials/scene
include ../partials/schedule

block content
    -
        let xAxis = locations
        let yAxis = timeslots
        let xAxisType = 'location'
        let cellsPerSlot = 6;
        let maxScenesPerSlot = 3;
        let rowHeight = 50;
        if (locations.length > timeslots.length){
            xAxis = timeslots;
            yAxis = locations;
            xAxisType = 'timeslot'
            rowHeight = rowHeight / cellsPerSlot;
        }

        const columns = xAxis.length*(xAxisType==='location'?cellsPerSlot:1) + (xAxisType==='location'?2:1);
        const rows = yAxis.length*(xAxisType!=='location'?cellsPerSlot:1) + (xAxisType!=='location'?2:1);

    input#cellsPerSlot(type='hidden' value=cellsPerSlot)
    input#xAxisType(type='hidden' value=xAxisType)
    input#locationColumns(type='hidden' value=xAxis.length*(xAxisType==='location'?cellsPerSlot:1) )
    input#locationRows(type='hidden' value=yAxis.length*(xAxisType!=='location'?cellsPerSlot:1) )
    input#eventId(type='hidden' value=event.id)
    input#scheduleType(type='hidden' value='edit')
    input#csrfToken(type='hidden' value=csrfToken)

    .d-flex.flex-column.h-100.p-0
        .screen-container.d-flex.flex-column#schedule-container.px-2.mb-4(
            min-size=30
        )

            if new Date(event.end_time) < new Date()
                .container
                    .row.mb-2
                        .col
                            .alert.alert-info
                                i.fa.fa-info-circle.me-2
                                | This event is in the past
            .row.mb-2
                .col.px-4
                    button.btn.btn-sm.btn-outline-success#confirm-schedule-btn(
                        role=button
                        data-bs-toggle='tooltip'
                        title='Confirm all Scheduled Scenes'
                    )
                        i.fa.fa-calendar-check.me-2
                        | Confirm Schedule

            .container.my-0
                .row.my-0
                    .col.my-2.alert.alert-warning.alert-dismissible#schedule-alert(style='display:none')
                        i.fa.fa-exclamation-triangle.me-2

                        span.alert-text
                        button.btn-close(type="button" aria-label="Close")

            .row.my-2
                #schedule-container-grid.d-grid.col(
                    style=`grid-template-columns: repeat(${columns}, 1fr); grid-auto-rows: minmax(${rowHeight}px, auto);`
                )

                    each xItem, idx in xAxis
                        -
                            const posXstart = (idx * (xAxisType==='location'?cellsPerSlot:1)) + 2;
                        if xAxisType === 'location'
                            div.location-header.text-center.align-bottom.mb-1.schedule-cell(
                                id=`location-${xItem.id}-header`
                                data-location-id=xItem.id
                                style=`grid-row: 1; grid-column: ${posXstart} / span ${(xAxisType==='location'?cellsPerSlot:1)}`
                            )
                                strong=xItem.name
                                div.text-start.px-2
                                    +locationTags(xItem)
                        else
                            div.timeslot-header.text-center.align-bottom.mb-1.schedule-cell(
                                id=`timeslot-${xItem.id}-header`
                                data-timeslot-id=xItem.id
                                style=`grid-row: 1; grid-column: ${posXstart} / span ${(xAxisType==='location'?cellsPerSlot:1)}`

                            )
                                span.flex-fill.text-center
                                    +timeslotName(xItem)

                    if xAxisType === 'location'
                        div.users-header.text-center(
                            style=`grid-row: 1; grid-column: -2`)
                            strong Users

                    each yItem, row in yAxis
                        -
                            const posY = (row * (xAxisType!=='location'?cellsPerSlot:1)) + 2 ;
                        if xAxisType === 'location'
                            div.timeslot-header.schedule-cell.d-flex.align-items-center.align-center.y-header.px-2.text-nowrap(
                                id=`timeslot-${yItem.id}-header`
                                data-timeslot-id=yItem.id
                                style=`grid-row:${posY}; grid-column: 1`
                            )
                                span.flex-fill.text-center
                                    +timeslotName(yItem)
                        else
                            div.timeslot-header.schedule-cell.text-center.align-bottom.schedule-cell.y-header.px-2.text-nowrap(
                                id=`location-${yItem.id}-header`
                                data-location-id=yItem.id
                                style=`grid-row:${posY} / span ${cellsPerSlot}; grid-column: 1`
                            )
                                strong=yItem.name
                                div.text-start.px-2
                                    +locationTags(yItem)


                        each xItem, idx in xAxis
                            -
                                const posXstart = (idx * (xAxisType==='location'?cellsPerSlot:1)) + 2;
                                const posY = (row * (xAxisType!=='location'?cellsPerSlot:1)) + 2 ;
                                const timeslot = xAxisType==='location'?yItem:xItem
                                const location = xAxisType==='location'?xItem:yItem

                            div.schedule-cell.schedule-slot.border.overflow-visible(
                                id=`cell-timeslot-${timeslot.id}-location-${location.id}`
                                data-location-id=location.id
                                data-timeslot-id=timeslot.id
                                data-pos-x=posXstart
                                data-pos-y=posY
                                data-location-multiple=location.multiple_scenes?'true':'false'
                                data-children-count=maxScenesPerSlot
                                style=`grid-row: ${posY} /span ${(xAxisType!=='location'?cellsPerSlot:1)}; grid-column: ${posXstart} / span ${(xAxisType==='location'?cellsPerSlot:1)};`
                            )
                                span.float-end.schedule-drop-indicator.m-1.text-warning.schedule-drop-requested Weak Match
                                span.float-end.schedule-drop-indicator.m-1.text-info.schedule-drop-required Strong Match
                                span.float-end.schedule-drop-indicator.m-1.text-success.schedule-drop-suggested Suggested
                                span.float-end.schedule-drop-indicator.m-1.text-danger.schedule-drop-rejected Rejected

                        if xAxisType === 'location'
                            div.users-cell.align-items-center.d-flex.text-center.px-1(
                                style=`grid-row: ${row+2}; grid-column: -2`
                                data-timeslot-id=yItem.id
                            )
                                +timeslotButtons(yItem)


                    if xAxisType !== 'location'
                        each xItem, idx in xAxis
                            -
                                const posXstart = (idx) + 2;
                            div.users-cell.align-items-center.d-flex.text-center.px-1.border-start.border-end.justify-content-center(
                                style=`grid-row: ${rows} / span ${cellsPerSlot}; grid-column: ${posXstart}`
                                data-timeslot-id=xItem.id
                            )
                                +timeslotButtons(xItem)

                    div(style=`grid-row: ${rows + (xAxisType==='location'?1:cellsPerSlot)}; grid-column: 2 / span ${xAxis.length*(xAxisType==='location'?cellsPerSlot:1)}`)
                        #schedule-legend.my-2(
                            style=`grid-template-columns: repeat(4, 1fr); grid-auto-rows: minmax(${rowHeight}px, auto);`
                        )
                                .bg-warning-subtle.p-2 Weak Match
                                .bg-info-subtle.p-2 Strong Match
                                .bg-success-subtle.p-2 Suggested
                                .bg-danger-subtle.p-2 Rejected

                    -
                        const maxHeight = _.max(scenes, scene => {
                            if (scene.status === 'ready') { return scene.timeslot_count; }
                            return 0;
                        });

                    div( style=`grid-row: ${rows + 1 + (xAxisType==='location'?1:cellsPerSlot)}; grid-column: 2 / span ${xAxis.length*(xAxisType==='location'?cellsPerSlot:1)}`)

                        #unscheduled.schedule-cell.schedule-slot.border(
                            data-location-id='none'
                            data-timeslot-id='none'
                            data-pos-x=1
                            data-pos-y=2
                            style=`grid-template-columns: repeat(${xAxis.length*(xAxisType==='location'?cellsPerSlot:1)}, 1fr); grid-template-rows: 30px; grid-auto-rows: minmax(${rowHeight}px, auto); min-height: ${rowHeight}px`
                        )
                            div.px-2.py-1(style='grid-row:1; grid-column: 1 / span 10')
                                span.float-start.text-dark(style='z-index:0') Unscheduled Scenes

                    each scene in scenes
                        +sceneScheduleItem(scene, xAxisType, cellsPerSlot)

        .content-resizer.d-none.position-absolute.bottom-0.w-100#detail-container(
            data-direction="vertical"
            style='z-index:75'
        )
            .resizer.bg-dark(data-direction='vertical')
                .button-group.py-1.position-relative.ms-4(style="top:-15px; left:0px; font-size:90%;z-index:55")
                    .badge.rounded-pill.text-bg-danger.me-2.resizer-close(
                        style="cursor:pointer;"
                        data-bs-toggle="tooltip"
                        data-delay={ "show": 500, "hide": 100 }
                        title="Close"
                    )
                        .fa.fas.fa-fw.fa-times
                    .badge.rounded-pill.text-bg-warning.me-2.resizer-move(
                        data-bs-toggle="tooltip"
                        data-delay={ "show": 500, "hide": 100 }
                        title="Drag to Resize"
                    )
                        .fa.fas.fa-fw.fa-arrows-alt-v

                    .badge.rounded-pill.text-bg-success.me-2.resizer-expand(
                        style="cursor:pointer;"
                        data-bs-toggle="tooltip"
                        data-delay={ "show": 500, "hide": 100 }
                        title="Expand"
                    )
                        .fa.fas.fa-fw.fa-expand-alt

                    .badge.rounded-pill.text-bg-success.me-2.resizer-restore(
                        style="cursor:pointer;"
                        data-bs-toggle="tooltip"
                        data-delay={ "show": 500, "hide": 100 }
                        title="Restore"
                    )
                        .fa.fas.fa-fw.fa-compress-alt

            #users-panel.py-3.px-4.bg-white.h-100(
                tabindex="-1"
                timeslot-id='none'
                type='init'
                scenes='[]'
                data-bs-scroll="true"
                data-bs-backdrop="false"
            )

                .d-block
                    div(data-bs-theme="dark")
                        button.float-end.btn-close.resizer-close(area-label="close" type="button")
                    .row.py-2
                        .col
                            h5.offcanvas-title.title
                    .row.loading
                        .col
                            .text-center.my-1
                                .spinner-border.m-auto(role="status" style="width: 2rem; height: 2rem;")
                                    .visually-hidden Loading
                    .row.py-2
                        .col
                            .content(style='display:none')


    link(rel='stylesheet' href='/stylesheets/schedule.css')
append scripts
    script(src='https://cdn.jsdelivr.net/npm/async@3.2.6/dist/async.min.js')
    script(src='https://code.jquery.com/ui/1.13.2/jquery-ui.min.js')
    script(src='/javascripts/templates/event/sceneDetails.js')
    script(src='/javascripts/templates/event/usersList.js')
    script(src='/javascripts/templates/event/busyUsersList.js')
    script(src='/javascripts/schedule.js')
