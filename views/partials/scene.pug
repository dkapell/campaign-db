mixin sceneLocationInput(location, request_status, schedule_status, showOutdoors)
    li.list-group-item.location-input(
        data-multiple=location.multiple_scenes?'true':'false'
        data-combat=location.combat?'true':'false'
        data-outdoors=location.outdoors?'true':'false'
        data-special=location.special?'true':'false'
    )
        .row.mb-2
            .col.px-1
                if schedule_status !== 'unscheduled'
                    .float-end
                        +sceneItemScheduleBadge(schedule_status)
                -
                    let iconClass = '';
                    if (schedule_status === 'suggested') { iconClass = 'text-warning'; }
                    if (schedule_status === 'confirmed') { iconClass = 'text-success'; }
                if showOutdoors
                    if location.outdoors
                        i.fas.fa-tree.me-1(class=iconClass)
                    else
                        i.fas.fa-warehouse.me-1(class=iconClass)
                else
                    i.fas.fa-map-marker-alt.me-1(class=iconClass)
                strong.me-1= location.name
                if location.description
                    button.btn.btn-outline-info.btn-xs.mx-1.location-info(
                        type="button"
                        data-bs-toggle='popover'
                        title=location.name
                        content=location.description
                    )
                        i.fas.fa-info.fa-fw
                +locationTags(location)


        .row.my-1
            .col.px-1
                if !schedule_status || schedule_status=== 'unscheduled'
                    select.form-select.form-select-sm.complex-select2(name=`scene[locations][id-${location.id}][request_status]`)
                        +sceneStatusRequestOptions(request_status)
                else
                    input(
                        type='hidden'
                        name=`scene[locations][id-${location.id}][request_status]`
                        value=request_status
                    )
                    +sceneItemRequestText(request_status)


mixin locationTags(location)
    if location.id !== 'busy'
        if location.combat
            .badge.text-bg-primary.me-1(data-bs-toggle="tooltip" title='Combat')
                i.fas.fa-fist-raised.fa-fw

        else
            .badge.text-bg-primary.me-1(data-bs-toggle="tooltip" title='Non-Combat')
                i.fas.fa-comments.fa-fw


    if location.multiple_scenes
        .badge.text-bg-primary.mx-1(data-bs-toggle="tooltip" title='Multiple Scenes')
            i.fas.fa-plus.fa-fw
    if location.special
        .badge.text-bg-primary.mx-1(data-bs-toggle="tooltip" title='Special Location')
            i.fas.fa-star.fa-fw

    .float-end
        each tag in location.tags
            .badge.text-bg-info.mx-1=tag.name

mixin sceneTimeslotInput(timeslot, request_status, schedule_status, showDaytime=false)
    li.list-group-item.timeslot-input(
        data-type=timeslot.type
        data-nighttime=timeslot.nighttime
    )
        .row
            .col-md-7.px-1
                span.align-middle
                    +timeslotName(timeslot, false, schedule_status, showDaytime)

            .col.px-1
                if !schedule_status || schedule_status=== 'unscheduled'
                    select.form-select.form-select-sm.complex-select2(name=`scene[timeslots][id-${timeslot.id}][request_status]`)
                        +sceneStatusRequestOptions(request_status)
                else
                    input(
                        type='hidden'
                        name=`scene[timeslots][id-${timeslot.id}][request_status]`
                        value=request_status
                    )
                    +sceneItemRequestText(request_status)
                    .float-end
                        +sceneItemScheduleBadge(schedule_status)


mixin timeslotName(timeslot, showTags=false, schedule_status='unscheduled', showDaytime=false)
    -
        let iconClass = '';
        if (schedule_status === 'suggested') { iconClass = 'text-warning'; }
        if (schedule_status === 'confirmed') { iconClass = 'text-success'; }
    case timeslot.type
        when 'meal'
            i.fas.fa-utensils.fa-fw.me-1(
                class=iconClass
                title='Meal'
                data-bs-toggle='tooltip'
            )
        when 'special'
            i.fas.fa-clock.fa-fw.me-1(
                class=iconClass
                title='Special'
                data-bs-toggle='tooltip'
            )

        default
            if showDaytime
                if timeslot.nighttime
                    i.far.fa-moon.fa-fw.me-1(
                        class=iconClass
                        title='Evening'
                        data-bs-toggle='tooltip'
                    )
                else
                    i.far.fa-sun.fa-fw.me-1(
                        class=iconClass
                        title='Day'
                        data-bs-toggle='tooltip'
                    )
            else
                i.far.fa-clock.fa-fw.me-1(
                    class=iconClass
                    title='Regular'
                    data-bs-toggle='tooltip'
                )
    strong= timeslot.name

    if tags && timeslot.type !== 'regular'
        .badge.text-bg-primary.ms-2=capitalize(timeslot.type)
    if timeslot.display_name
        br
        span #{timeslot.display_name}

mixin locationName(location, showOutdoors)
    if location.id === 'busy'
        i.fas.fa-calendar.me-1(
            title='Busy'
            data-bs-toggle='tooltip'
        )
    else if showOutdoors
        if location.outdoors
            i.fas.fa-tree.me-1(
                title='Outdoors'
                data-bs-toggle='tooltip'
            )
        else
            i.fas.fa-warehouse.me-1(
                title='Indoors'
                data-bs-toggle='tooltip'
            )
    else
        i.fas.fa-map-marker-alt.me-1
    strong=location.name
    if location.description
        button.btn.btn-outline-info.btn-xs.ms-1.location-info(
            type="button"
            data-bs-toggle='popover'
            title=location.name
            content=location.description
        )
            i.fas.fa-info.fa-fw


mixin sceneUserInput(user, request_status, schedule_status, details)
    li.list-group-item.scene-user(id=`scene-user-${user.id}`)
        .row
            .col-md-7
                -
                    let iconClass = '';
                    if (schedule_status === 'suggested') { iconClass = 'text-warning'; }
                    if (schedule_status === 'confirmed') { iconClass = 'text-success'; }
                i.far.fa-user.me-1.align-middle(class=iconClass)
                strong.align-middle.user-name= user.name
                .badge.text-bg-primary.ms-2.user-type(style=user.type==='player'?'display:none':'')=capitalize(user.typeForDisplay)

            .col.px-1
                if !schedule_status || schedule_status=== 'unscheduled'

                    select.form-select.form-select-sm.scene-status-select(
                        class=user.id!=='new'?'complex-select2':''
                        name=`scene[users][id-${user.id}][request_status]`
                        id=`scene-users-${user.type}-${user.id}-request-status`
                    )
                        +sceneStatusRequestOptions(request_status)
                else
                    input(
                        type='hidden'
                        name=`scene[users][id-${user.id}][request_status]`
                        value=request_status
                    )

                    +sceneItemRequestText(request_status)
                    .float-end
                        +sceneItemScheduleBadge(schedule_status)
        if (user.type !== 'player')
            .row.my-1.details-row
                .col.ps-4.pe-1
                    input.form-control.form-control-sm.scene-details-input(
                        type='text'
                        name=`scene[users][id-${user.id}][scene_details][npc]`
                        value=details&&details.npc?details.npc:null
                        placeholder='NPC Name'
                    )

mixin sceneSourceInput(source, request_status, schedule_status)
    li.list-group-item.scene-source(id=`scene-source-${source.id}`)
        .row
            .col-md-7
                -
                    let iconClass = '';
                    if (schedule_status === 'suggested') { iconClass = 'text-warning'; }
                    if (schedule_status === 'confirmed') { iconClass = 'text-success'; }
                i.far.fa-id-card.me-1.align-middle(class=iconClass)
                strong.align-middle.source-name= source.name
                .badge.text-bg-primary.ms-2.source-type=capitalize(source.type.name)

            .col.px-1
                if !schedule_status || schedule_status=== 'unscheduled'
                    select.form-select.form-select-sm.scene-status-select(
                        class=source.id!=='new'?'complex-select2':''
                        name=`scene[sources][id-${source.id}][request_status]`
                        id=`scene-sources-${source.id}`
                    )
                        +sceneStatusRequestOptions(request_status)
                else
                    input(type='hidden' name=`scene[sources][id-${source.id}][request_status]` value=request_status)

                    +sceneItemRequestText(request_status)
                    .float-end
                        +sceneItemScheduleBadge(schedule_status)

mixin sceneSkillInput(skill, request_status, schedule_status)
    li.list-group-item.scene-skill(id=`scene-skill-${skill.id}`)
        .row
            .col-md-7
                -
                    let iconClass = '';
                    if (schedule_status === 'suggested') { iconClass = 'text-warning'; }
                    if (schedule_status === 'confirmed') { iconClass = 'text-success'; }
                i.fas.fa-scroll.me-1.align-middle(class=iconClass)
                strong.align-middle.skill-name= skill.name
                .badge.text-bg-primary.ms-2.skill-source=skill.source.name

            .col.px-1
                if !schedule_status || schedule_status=== 'unscheduled'
                    select.form-select.form-select-sm.scene-status-select(
                        class=skill.id!=='new'?'complex-select2':''
                        name=`scene[skills][id-${skill.id}][request_status]`
                        id=`scene-skills-${skill.id}`
                    )
                        +sceneStatusRequestOptions(request_status)
                else
                    input(type='hidden' name=`scene[skills][id-${skill.id}][request_status]` value=request_status)

                    +sceneItemRequestText(request_status)
                    .float-end
                        +sceneItemScheduleBadge(schedule_status)

mixin sceneItemRequestText(request_status)
    case request_status
        when 'requested'
            span.text-info Requested
        when 'required'
            span.text-primary Required
        when 'rejected'
            span.text-danger Rejected
        default
            span.text-dark None

mixin sceneItemScheduleBadge(schedule_status)
    case schedule_status
        when 'unscheduled'
            .badge.text-bg-dark Unscheduled
        when 'suggested'
            .badge.text-bg-warning Suggested
        when 'confirmed'
            .badge.text-bg-success Confirmed

mixin sceneStatusRequestOptions(status)
    each value in ['none', 'requested', 'required', 'rejected']
        -
            let badgeClass = 'dark';
            switch (value){
                case 'requested': badgeClass = 'info'; break;
                case 'required': badgeClass = 'primary'; break;
                case 'rejected': badgeClass = 'danger'; break;
            }
        option(
            value=value
            selected=value===status
            data-text=`<span class="text-${badgeClass}">${capitalize(value)}</span>`
            data-html=`<span class="text-${badgeClass}">${capitalize(value)}</span>`
            )= capitalize(value)

mixin sceneStatusBadge(status)
    case status
        when 'requested'
            .badge.text-bg-info.mx-1 Requested
        when 'required'
            .badge.text-bg-primary.mx-1 Required
        when 'suggested'
            .badge.text-bg-warning.mx-1 Suggested
        when 'confirmed'
            .badge.text-bg-success.mx-1 Confirmed
        when 'rejected'
            .badge.text-bg-danger.mx-1 Rejected
        when 'scheduled'
            .badge.text-bg-warning.mx-1 Scheduled
        when 'ready'
            .badge.text-bg-info.mx-1 Ready
        when 'new'
            .badge.text-bg-dark.mx-1 New
        when 'postponed'
            .badge.text-bg-danger.mx-1 Postponed

mixin sceneTable(scenes)
    .table-responsive
        .col-sm-6.offset-sm-3.text-center.table-loading
            .spinner-border.m-5(role="status" style="width: 3rem; height: 3rem;")
                .visually-hidden Table is Loading

        table.table.table-striped.data-table.table-hover.my-3.dt-responsive.nowrap.table-sm.w-100.scene-table(
            style="display: none"
            )
            thead
                tr
                    th
                    th Event
                    th(data-priority="1") Name
                    th Status
                    th Timeslot
                    th Location
                    th Players
                    th Staff
                    th


            tbody
                for scene in scenes
                    -
                        const timeslotsConfirmed = scene.timeslots.filter(timeslot => {
                            return timeslot.scene_schedule_status === 'confirmed'
                        });
                        const timeslotsSuggested = scene.timeslots.filter(timeslot => {
                            return timeslot.scene_schedule_status === 'suggested'
                        });
                        const locationsConfirmed = scene.locations.filter(location => {
                            return location.scene_schedule_status === 'confirmed'
                        });
                        const locationsSuggested = scene.locations.filter(location => {
                            return location.scene_schedule_status === 'suggested'
                        });
                        const players = scene.users.filter(user => {
                            return user.scene_schedule_status === 'confirmed' && user.type === 'player'
                        });
                        const staff = scene.users.filter(user => {
                            return user.scene_schedule_status === 'confirmed' && user.type !== 'player'
                        });
                    tr(class='clickable-row', data-click-object='scene' data-click-id=scene.id)
                        td.dtr-control
                        td
                            if scene.event
                                a.action-btn(href=`/event/${scene.event.id}`)
                                    i.far.fa-calendar.me-1
                                    = scene.event.name
                            else
                                i Unassigned
                        td= scene.name
                        td
                            +sceneStatusBadge(scene.status)
                        td
                            if timeslotsConfirmed.length
                                = (_.pluck(timeslotsConfirmed, 'name')).join(', ')
                                i.far.fa-question-check.text-success.ms-1(title="Confirmed" data-bs-toggle='tooltip')
                                if timeslotsConfirmed.length !== scene.timeslot_count
                                    span.ms-1 (#{scene.timeslot_count} Requested)
                            else if timeslotsSuggested.length
                                = (_.pluck(timeslotsSuggested, 'name')).join(', ')
                                i.far.fa-question-circle.text-warning.ms-1(title="Suggested" data-bs-toggle='tooltip')
                                if timeslotsSuggested.length !== scene.timeslot_count
                                    span.ms-1 (#{scene.timeslot_count} Requested)
                            else
                                | #{scene.timeslot_count} Requested

                        td
                            if locationsConfirmed.length
                                = (_.pluck(locationsConfirmed, 'name')).join(', ')
                                i.far.fa-question-check.text-success.ms-1(title="Confirmed" data-bs-toggle='tooltip')
                                if locationsConfirmed.length !== scene.locations_count
                                    span.ms-1 (#{scene.locations_count} Requested)
                            else if locationsSuggested.length
                                = (_.pluck(locationsSuggested, 'name')).join(', ')
                                i.far.fa-question-circle.text-warning.ms-1(title="Suggested" data-bs-toggle='tooltip')
                                if locationsSuggested.length !== scene.locations_count
                                    span.ms-1 (#{scene.locations_count} Requested)
                            else
                                | #{scene.locations_count} Requested
                        td #{scene.player_count_min} - #{scene.player_count_max} (#{players.length})
                        td #{scene.staff_count_min} - #{scene.staff_count_max} (#{staff.length})
                        td.text-end
                            a.btn.btn-outline-info.btn-xs.action-btn.mx-1(
                                href=`/scene/${scene.id}/edit?backto=list`
                                title='Edit Scene'
                                data-bs-toggle='tooltip'
                            )
                                i.fas.fa-edit.fa-fw

                            a.btn.btn-outline-danger.btn-xs.delete-btn.mx-1(
                                role="button",
                                url=`/scene/${scene.id}`,
                                data-back='/scene'
                                title='Delete Scene'
                                data-bs-toggle='tooltip'
                                data-csrf=csrfToken
                            )
                                i.fas.fa-trash.fa-fw

mixin playerEntry(user)
    if checkPermission('contrib')
        if user.character
            a.me-2(href=`character/${user.character.id}`)
                i.far.fa-user.me-1
                = user.character.name
            span.me-0 (
            a(href=`/user/${user.id}`)
                i.fa.fas.fa-user.me-1
                = user.name
            span.ms-0 )
        else
            a(href=`/user/${user.id}`)
                i.fa.fas.fa-user.me-1
                = user.name

    else
        if user.character
            i.far.fa-user.me-1
            span.me-2= user.character.name
            if checkPermission('event')
                span.me-0 (
                i.fas.fa-user.me-1
                =user.name
                span.ms-0 )
        else
            i.fas.fa-user.me-1
            =user.name

mixin staffEntry(user)
    if checkPermission('contrib')
        a.me-2(href=`/user/${user.id}`)
            i.fas.fa-users.me-1
            = user.name
        if user.npc
            span.me-0 (
            i.far.fa-user.me-1
            =user.npc
            span.ms-0 )

    else
        i.fas.fa-users.me-1
        = user.name

mixin sourceEntry(source)
    i.far.fa-id-card.me-1.align-middle
    strong.align-middle.source-name= source.name
    .badge.text-bg-primary.ms-2.source-type=capitalize(source.type)

mixin skillEntry(skill)
    i.fas.fa-scroll.me-1.align-middle
    strong.align-middle.skill-name= skill.name
    .badge.text-bg-primary.ms-2.skill-source=skill.source.name

mixin issueTable(scenes, simpleTable=false)
    .table-responsive
        .col-sm-6.offset-sm-3.text-center.table-loading
            .spinner-border.m-5(role="status" style="width: 3rem; height: 3rem;")
                .visually-hidden Table is Loading
        table.table.table-striped.data-table.my-1.dt-responsive.nowrap.table-sm.w-100#issues-table(
            style="display: none"
            data-paging=simpleTable?'false':'true'
            data-searching=simpleTable?'true':'true'
            data-layout=simpleTable?'{"topEnd":null}':null
            data-info=simpleTable?'false':'true'
            data-page-length="10"
            )
            thead
                tr
                    th
                    th Level
                    if scenes.length > 1
                        th Scene
                    th Issue
                    th Status
                    th
            tbody
                each scene in scenes
                    each issue in scene.issues
                        tr.px-2(
                            class=issue.ignored?'ignored':''
                            data-issue-id=issue.id
                            data-scene-id=scene.id
                            ignored=issue.ignored?'true':'false'
                        )
                            td.dtr-control
                            td
                                if issue.level==='warning'
                                    span.badge.text-bg-danger
                                        i.fas.fa-exclamation-triangle.me-1
                                        | Warning
                                else
                                    span.badge.text-bg-info
                                        i.fas.fa-info-circle.scene-info.me-1
                                        | Info

                            if scenes.length > 1
                                td
                                    a.scene-link.action-btn(
                                        href='#'
                                        data-scene-id=scene.id
                                    )= scene.name

                            td= issue.text
                            td
                                span.badge.text-bg-info.ms-2.ignored-badge Accepted
                            td.text-end
                                a.link-underline.link-underline-opacity-0.issue-ignore-btn.ignore-btn.text-success.action-btn(
                                    data-bs-toggle='tooltip'
                                    title='Accept/Ignore Issue'
                                    data-event-id=scene.event_id
                                    data-issue-id=issue.id
                                    data-status='ignore'
                                    href='#'
                                )
                                    i.far.fa-square.fa-lg
                                a.link-underline.link-underline-opacity-0.issue-ignore-btn.unignore-btn.text-dark.action-btn(
                                    data-bs-toggle='tooltip'
                                    title='Reopen Issue'
                                    data-event-id=scene.event_id
                                    data-issue-id=issue.id
                                    data-status='unignore'
                                    href='#'
                                )
                                    i.far.fa-check-square.fa-lg


mixin sceneCard(scene, full=false)
    .card
        .card-header
            .row
                .col-auto.col-lg
                    h5.d-inline
                        if checkPermission('event')
                            = scene.name
                        else if scene.player_name
                            = scene.player_name
                        else
                            = scene.name
                if full && checkPermission('event')
                    .col.text-end.text-md-center
                        if scene.display_to_pc
                            .badge.text-bg-success.me-2 Display to PC
                        else
                            .badge.text-bg-danger.me-2 Do Not Display to PC
                        +sceneStatusBadge(scene.status)

                if scene.event
                    .col-md.text-end
                        if full
                            a.me-2(href=`/event/${scene.event.id}`)
                                i.far.fa-calendar.me-1
                                = scene.event.name

                        = scene.start
                        if (scene.timeslots.confirmed && scene.timeslots.confirmed.length > 1) || (scene.timeslots.suggested && scene.timeslots.suggested.length > 1)
                            span.ms-1 +#{scene.duration/60}h

                else if full
                    .col.text-end
                        i Unspecified Event




        .card-body.position-relative
            if full && checkPermission('gm')
                .position-absolute.top-0.end-0.pe-3.pt-3
                    a.btn.btn-sm.btn-outline-primary(
                        role="button"
                        href=`/scene/${scene.id}/edit?backto=scene`
                        title="Edit Scene"
                        data-bs-toggle="tooltip"
                    )
                        i.fas.fa-edit
                        span.d-none.d-md-inline.ms-1 Edit Scene
            if full && scene.issues.length
                .row.my-1
                    .col-8
                        h5.d-inline.pe-4 Issues
                        .form-check.form-switch.pt-0.form-check-inline
                            input.form-check-input#showIgnoredIssues(type="checkbox")
                            label.form-check-label(for="showIgnoredIssues") Show Accepted/Ignored Issues
                        +issueTable([scene], true)



            if scene.player_name
                .row.my-1
                    .col
                        strong.me-2 Player-Facing Name:
                        span=scene.player_name


            if checkPermission('event') && scene.tags && scene.tags.length
                .row.my-1
                    .col
                        each tag in scene.tags
                            .badge.text-bg-info=tag
            if checkPermission('event') && scene.writer
                .row.my-1
                    .col
                        strong.me-2 Scene Writer:
                        span=scene.writer.name

            if checkPermission('event') && scene.runner
                .row.my-1
                    .col
                        strong.me-2 Scene Runner:
                        span=scene.runner.name

            if full && scene.setup_slots!== currentCampaign.default_setup_slots
                .row.my-1
                    .col
                        strong.me-2 Setup Timeslots:
                        span=scene.setup_slots
            if full && scene.cleanup_slots !== currentCampaign.default_cleanup_slots
                .row.my-1
                    .col
                        strong.me-2 Cleanup Timeslots:
                        span=scene.cleanup_slots
            if scene.locations.confirmed
                .row.my-1
                    .col
                        strong.me-2 Location(s):
                        each location, lidx in scene.locations.confirmed
                            = location.name
                            if lidx < scene.locations.confirmed.length-1
                                span.ms-0.me-1 ,
                        if scene.locations_count !== scene.locations.confirmed.length
                            span.ms-2 (#{scene.locations_count} Requested)
            else if scene.locations.suggested
                .row.my-1
                    .col
                        strong.me-2 Location(s):
                        each location, lidx in scene.locations.suggested
                            = location.name
                            if lidx < scene.locations.suggested.length-1
                                span.ms-0.me-1 ,
                        if scene.locations_count !== scene.locations.suggested.length
                            span.ms-2 (#{scene.locations_count} Requested)
            else if scene.locations.unscheduled
                - const locationsByRequest = _.groupBy(scene.locations.unscheduled, 'scene_request_status');
                .row.my-1
                    .col
                        strong.me-2 Location Count
                        span=scene.locations_count
                each status in ['requested', 'required', 'rejected']
                    if locationsByRequest[status]
                        .row.my-1
                            .col
                                strong.me-2 Location(s) #{capitalize(status)}:
                                each location, lidx in locationsByRequest[status]
                                    = location.name
                                    if lidx < locationsByRequest[status].length-1
                                        span.ms-0.me-1 ,

            if !scene.timeslots.confirmed && !scene.timeslots.suggested && scene.timeslots.unscheduled
                - const timeslotsByRequest = _.groupBy(scene.timeslots.unscheduled, 'scene_request_status');
                .row.my-1
                    .col
                        strong.me-2 Timeslot Count
                        span=scene.timeslot_count
                each status in ['requested', 'required', 'rejected']
                    if timeslotsByRequest[status]
                        .row.my-1
                            .col
                                strong.me-2 Timeslot(s) #{capitalize(status)}:
                                each location, lidx in timeslotsByRequest[status]
                                    = location.name
                                    if lidx < timeslotsByRequest[status].length-1
                                        span.ms-0.me-1 ,
            if scene.prereqs && scene.prereqs.length
                .row.my-1
                    .col
                        strong.me-2 Prereqs
                        each prereq, pidx in scene.prereqs
                            a(href=`/scene/${prereq.id}`)
                                i.fas.fa-theater-masks.me-1
                                =prereq.name
                            if pidx < scene.prereqs.length-1
                                span.ms-0.me-2 ,

            if scene.description
                .row.my-1
                    .col
                        strong Description
                            if full
                                span.ms-1 (Player-Visible)

                        p.my-1(class=full?'ps-4':'')!=marked.parseInline(scene.description, {breaks:true})

            if full && scene.schedule_notes
                .row.my-1
                    .col
                        strong Schedule Notes
                        p.my-1.ps-4!=marked.parseInline(scene.schedule_notes, {breaks:true})

            .row.my-1
                if _.keys(scene.players).length
                    .col-lg-8
                        h5 Characters
                        if full && checkPermission('event')
                            .player-count
                                strong.me-2 Player Count:
                                span #{scene.player_count_min} - #{scene.player_count_max}
                        ul.list-unstyled
                            each status in ['confirmed', 'suggested']
                                if scene.players[status]
                                    each user in scene.players[status]
                                        li
                                            if status !== 'confirmed'
                                                +sceneStatusBadge(status)
                                            +playerEntry(user)

                            if !scene.players.confirmed && !scene.players.suggested && scene.players.unscheduled
                                - const playersByRequestStatus = _.groupBy(scene.players.unscheduled, 'scene_request_status');
                                 each requestStatus in _.keys(playersByRequestStatus)
                                    each user in playersByRequestStatus[requestStatus]
                                        li
                                            +sceneStatusBadge(requestStatus)
                                            +playerEntry(user)



                if checkPermission('event') && _.keys(scene.staff).length
                    .col-lg
                        h5 Staff
                        if full
                            .staff-count
                                strong.me-2 Staff Count
                                span #{scene.staff_count_min} - #{scene.staff_count_max}
                                if scene.combat_staff_count_min
                                    span.ms-1 (#{scene.combat_staff_count_min} - #{scene.combat_staff_count_max} as Combat Staff)
                        ul.list-unstyled
                            each status in ['confirmed', 'suggested']
                                if scene.staff[status]
                                    each user in scene.staff[status]
                                        li
                                            if status !== 'confirmed'
                                                +sceneStatusBadge(status)
                                            +staffEntry(user)

                            if !scene.staff.confirmed && !scene.staff.suggested && scene.staff.unscheduled
                                - const staffByRequestStatus = _.groupBy(scene.staff.unscheduled, 'scene_request_status');
                                 each requestStatus in _.keys(staffByRequestStatus)
                                    each user in staffByRequestStatus[requestStatus]
                                        li
                                            +sceneStatusBadge(requestStatus)
                                            +staffEntry(user)
            if full && (_.keys(scene.sources).length || _.keys(scene.skills).length)
                .row
                    if _.keys(scene.sources).length
                        .col-lg
                            h5 Sources
                            ul.list-unstyled
                                each requestStatus in _.keys(scene.sources)
                                    each source in scene.sources[requestStatus]
                                        li
                                            +sceneStatusBadge(requestStatus)
                                            +sourceEntry(source)
                    if _.keys(scene.skills).length
                        .col-lg
                            h5 Skills
                            ul.list-unstyled
                                each requestStatus in _.keys(scene.skills)
                                    each skill in scene.skills[requestStatus]
                                        li
                                            +sceneStatusBadge(requestStatus)
                                            +skillEntry(skill)


        -
            const characterIds = [];
            for (const status of ['confirmed', 'suggested']){
                if (scene.players[status]){
                    for (const player of scene.players[status]){
                        if (player.character){
                            characterIds.push(player.character.id);
                        }
                    }
                }
            }


        if (checkPermission('event') && scene.staff_url) || scene.player_url || (checkPermission('contrib') && characterIds.length)
            .card-footer
                if checkPermission('event') && scene.staff_url
                    a.btn.btn-sm.btn-outline-info.me-2(href=scene.staff_url target='_blank')
                        | Staff Writeup
                        i.fa.fa-external-link.ms-1
                if scene.player_url
                    a.btn.btn-sm.btn-outline-info.me-2(href=scene.player_url target='_blank')
                        | Player Writeup
                        i.fa.fa-external-link.ms-1

                if checkPermission('contrib') && characterIds.length
                    a.btn.btn-sm.btn-outline-info.group-report-btn.me-1(
                        href=`/report/group?group=${characterIds.join(',')}`
                        title="Group Report"
                    )
                        i.fas.fa-calculator.me-1
                        | Group Report

                if !full && checkPermission('contrib')
                    .float-end
                        a.btn.btn-sm.btn-outline-info(
                            href=`/scene/${scene.id}`
                            title="View Scene"
                            data-bs-toggle='tooltip'
                        )
                            i.fas.fa-eye
