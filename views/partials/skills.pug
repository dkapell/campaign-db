mixin skillList(skills, showSource, backto)
    .row.my-2
        .col-sm-auto
            span.me-2.d-block.d-lg-inline.align-middle Toggle Column:
            .btn-group.btn-group-sm.d-inline.align-middle
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="0")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Source':'Name'
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="1")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Name':'Usage'
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="2")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Usage':'Tag(s)'
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="3")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Tag(s)':'Summary'
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="4")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Summary':'Cost'
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="5")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Cost':'Status'
                button.btn.btn-outline-info.toggle-vis.mt-1(data-column="6")
                    i.fas.fa-eye.fa-fw.me-1.col-indicator
                    = showSource?'Status':'Actions'

                if showSource
                    button.btn.btn-outline-info.toggle-vis.mt-1(data-column="7")
                        i.fas.fa-eye.fa-fw.me-1.col-indicator
                        | Actions
        if checkPermission('admin')
            .col-sm.text-end
                .form-check.form-switch.form-check-reverse
                    input.form-check-input#skillDeleteSwitch(type="checkbox")
                    label.form-check-label(for="skillDeleteSwitch") Show Delete Buttons
    .row-my-2
        .col
            .progress
                -
                    const skillsByStatus = {};
                    for (const skill of skills){
                        if (!_.has(skillsByStatus, skill.status.name)){
                            skillsByStatus[skill.status.name] = {
                                name:skill.status.name,
                                display_order: skill.status.display_order,
                                class: skill.status.class,
                                count:0
                            };
                        }
                        skillsByStatus[skill.status.name].count++;
                    }
                    skills
                    let prevBar = 0;

                each status in _.sortBy(_.values(skillsByStatus), 'display_order')
                    - const statusWidth = Math.round(status.count/skills.length * 100);
                    .progress-bar(
                        class=`bg-${status.class}`
                        style={width: `${statusWidth }%`}
                        aria-valuemin=prevBar
                        aria-valuenow=Math.min(prevBar+statusWidth, 100)
                        aria-valuemax=100
                        title=`${status.name} (${status.count})`
                        data-bs-toggle="tooltip"
                    )
                        if statusWidth > 5
                            | #{status.name} (#{status.count})
                        else
                            = status.count

                    - prevBar += statusWidth
    .row
        .col-sm
            .table-responsive.my-2
                .col-sm-6.offset-sm-3.text-center#tableLoading
                    .spinner-border.m-5(role="status" style="width: 3rem; height: 3rem;")
                        .visually-hidden Table is Loading
                table.table.table-striped.skill-table.table-hover.my-3.dt-responsive.nowrap.table-sm.topsort.table-bordered.w-100#skill-table(
                    data-order=showSource?'[[0, "asc"],[2, "asc"]]':'[[0, "asc"],[1, "asc"]]'
                    data-showedittoggle=true
                    data-showsource=showSource
                    style="display: none"
                    )
                    thead
                        tr
                            if (showSource)
                                th Source
                            th(data-priority="1") Name
                            th Usage
                            th(data-partialmatch="true") Tag(s)
                            th(data-priority="3") Summary
                            th Cost
                            th Status
                            th(data-priority="2" data-orderable="false")

                    tbody
                        for skill in skills

                            tr.clickable-row.skillRow(data-click-object='skill' data-click-id=skill.id )
                                if (showSource)
                                    th.source-column(data-sort=`${skill.source.type.display_order}-${skill.source.name}` data-search=skill.source.name)
                                        if skill.source
                                            a.action-btn(href=`/skill_source/${skill.source.id}`)= capitalize(skill.source.name)
                                        else
                                            i Not Set


                                td.fst-italic= skill.name

                                td
                                    if skill.usage
                                        = capitalize(skill.usage.name)
                                    else
                                        i Not Set
                                -
                                    const tags = [];
                                    if (skill.required){
                                        tags.push('required')
                                    }
                                    tags.push(..._.pluck(skill.tags, 'name'));

                                td(data-search= tags.join(', '))
                                    if skill.required
                                        span.badge.text-bg-danger.me-2 Required
                                    for tag in skill.tags.slice(0, -1)
                                        span.me-1(class=`text-${tag.color?tag.color:'info'}`)=tag.name
                                            | ,
                                    - const tag = skill.tags.slice(-1)[0]
                                    if tag
                                        span.me-1(class=`text-${tag.color?tag.color:'info'}`)=tag.name

                                td
                                    if skill.summary.length>83
                                        | !{marked.parseInline(skill.summary.substr(0, 80)+'...')}
                                    else
                                        | !{marked.parseInline(skill.summary)}
                                td= skill.cost
                                td
                                    if skill.status
                                        .badge.badge-pill.skill-status(class=`text-bg-${skill.status.class}`)
                                            = capitalize(skill.status.name)

                                td.text-end
                                    if skill.approvals
                                        .badge.text-bg-info.me-1(data-bs-toggle="tooltip" title="Approvals")=skill.approvals
                                    if (skill.description)
                                        a.btn.btn-outline-info.btn-xs.ms-1.action-btn(
                                            tabindex="0"
                                            role="button"
                                            data-bs-toggle="popover"
                                            data-bs-content=marked.parse(skill.description, {breaks: true})
                                            data-bs-html="true"
                                            title="Description"
                                        )
                                            i.fas.fa-eye.fa-fw

                                    if (skill.notes)
                                        a.btn.btn-outline-info.btn-xs.ms-1.action-btn(
                                            tabindex="0"
                                            role="button"
                                            data-bs-toggle="popover"
                                            data-bs-content=marked.parse(skill.notes, {breaks: true})
                                            data-bs-html="true"
                                            title="Notes"
                                        )
                                            i.fas.fa-sticky-note.fa-fw

                                    a.btn.btn-outline-primary.btn-xs.ms-1.skill-edit-btn(
                                        role="button"
                                        data-bs-toggle="tooltip"
                                        data-click-id=skill.id
                                        title="Edit"
                                        href=`/skill/${skill.id}/edit?backto=${backto}`
                                    )
                                        i.fas.fa-edit.fa-fw
                                    if checkPermission('admin')
                                        if skill.status.advanceable
                                            a.btn.btn-outline-primary.btn-xs.advance-btn.ms-1(
                                                style="display:none"
                                                role="button",
                                                url=`/skill/${skill.id}/advance`
                                            )
                                                i.fas.fa-arrow-right.fa-fw
                                        a.btn.btn-outline-danger.btn-xs.delete-btn.ms-1(
                                            style="display:none"
                                            role="button",
                                            url=`/skill/${skill.id}`
                                        )
                                            i.fas.fa-trash.fa-fw


mixin skillModal()
    .modal.fade#skillModal(role="dialog" tabindex="-1" aria-labelledby="popupModalLabel" aria-hidden="true")
        .modal-dialog.modal-xl.modal-dialog-centered(role="document")
            .modal-content
                .modal-header
                    h5.modal-title
                    button.btn-close#dismissPopupModal(type="button", data-bs-dismiss="modal" area-label="Close")
                .modal-body
                .modal-footer
                    button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Cancel
                    span.extra-buttons
                    button.btn.btn-primary.save-btn(type="submit") Save

mixin skillDisplay(skill)
    .row.my-1
        .col
            if skill.usage && skill.usage.display_name
                span.skill-usage.me-2.d-inline
                    strong.me-2 Usage:
                    = skill.usage.name
            if skill.tags
                span.skill-tags.ms-3
                    for tag in skill.tags
                        span.badge.me-1(class=`text-bg-${tag.color?tag.color:'primary'}`)= tag.name
            if skill.source
                .float-end=skill.source.name

    if skill.summary
        .row.my-1
            .col
                .skill-summary!= marked.parseInline(skill.summary)

    if skill.description
        .row.my-1
            .col
                .skill-description!= marked.parseInline(skill.description)

    if skill.characters
        .row
            .col
                .characters
                    strong.me-2 Characters:
                    if characters.length === skill.characters.length
                        i All
                    else
                        -
                            const charNames = skill.characters.map(e => {
                                return (_.findWhere(characters, {id:e})).name
                            });
                        = charNames.join(', ')
    if skill.issues
        .row
            .col
                ul.issues
                    for issue in skill.issues
                        if issue.field === 'conflict'
                            if (issue.skill)
                                li
                                    | This skill conflicts with #{issue.skill.source?issue.skill.source.name:'No Source'}:
                                    a.d-inline.mx-1(href=`/skill/${issue.skill.id}/edit?backto=validate`)
                                        | #{issue.skill.name?issue.skill.name:'TBD'}
                                        i.fas.fa-edit.mx-1
                                    | but that skill does not conflict with this one.
                            else
                                li= issue.type

                        else if issue.message
                            li=issue.message
                        else
                            li= issue.type

mixin providesHeader()
    .row.provides-header-row.d-none.d-lg-flex
        .col-lg-3
            label.control-label.provides-label Provides
        .col-lg-3
            label.control-label.provides-label Name/Subtype
        .col-lg-4
            label.control-label.provides-label Value
        .col-lg-2.text-end
            button.btn.btn-sm.btn-outline-success.add-provides-btn
                i.fa.fa-plus.me-1
                | Add Provides
    .row.provides-header-row.d-lg-none
        .col-lg-2
            button.btn.btn-sm.btn-outline-success.add-provides-btn
                i.fa.fa-plus.me-1
                | Add Provides

mixin provides(provides, objectType, id)
     .row.my-2.provides-row(id=`provides-${id}`)
        .col-lg-3
            label.control-label.provides-label.d-md-none(
                for=`${objectType}_provides_${id}_type`
                data-fieldtype='type'
                data-objtype=objectType
            ) Provides
            select.form-control.skill-provides-type.provides-input(
                name=`${objectType}[provides][${id}][type]`
                id=`${objectType}_provides_${id}_type`
                data-placeholder="Provides Type"
                class=id!=='new'?'clearable-select2':''
                data-fieldtype='type'
                data-objtype=objectType
            )
                option(value="-1")
                    for item in providesTypes
                        option(value=item.value selected=provides.type===item.value)= item.name
        .col-lg-3
            label.control-label.provides-label.d-md-none(
                for=`${objectType}_provides_${id}_name`
                data-fieldtype='name'
                data-objtype=objectType
            ) Name/Subtype
            input.form-control.skill-provides-name.provides-input(
                type="text",placeholder="Name"
                name=`${objectType}[provides][${id}][name]`
                value=provides.name
                id=`skill_provides_${id}_name`
                data-fieldtype='name'
                data-objtype=objectType
            )

        .col.lg-4
            label.control-label.provides-label.d-md-none(
                for=`${objectType}_provides_${id}_value`
                data-fieldtype='value'
                data-objtype=objectType
            ) Value
            input.form-control.skill-provides-value.provides-input(
                type="text"
                placeholder="Value",
                name=`${objectType}[provides][${id}][value]`
                value=provides.value
                id=`${objectType}_provides_${id}_value`
                data-fieldtype='value'
                data-objtype=objectType
            )
        .col-lg-2.text-end.align-bottom
            button.btn.btn-sm.btn-outline-danger.remove-provides-btn.align-bottom(data-toggle="tooltip" title='Remove Provides' data-placement="right")
                i.fas.fa-trash.fa-fw.me-1
                | Remove
