
mixin reviewSkillList(skills, filter, showActions)
    ul.list-unstyled
        for skill in skills
            - skill.hasComments = (skill.reviews.filter(review => { return review.content})).length > 0;
            if (!filter || (filter === 'unapproved' && !skill.approved) || (filter === 'comments' && skill.hasComments))
                .review-skill
                    +reviewSkillDoc(skill, showActions)
                    if showActions
                        +reviewSkillActions(skill)




mixin reviewSkillDoc(skill, showActions)
    li.media.py-3.ps-3(class=!showActions?'border-bottom':'')
        .media-body
            .row.mt-0
                .col
                    h3.h5.d-inline
                        span.badge.float-end(class=`bg-${skill.status.class?skill.status.class:'info'}`)= skill.status.name
                        a.text-reset.skill-name(href=`/skill/${skill.id}/edit?backto=review` data-bs-toggle='tooltip' title='Edit Skill')
                            if skill.name==='TBD'
                                i.skill-name Unnamed Skill
                                if (skill.cost)
                                    span.skill-cost.ms-2 (#{skill.cost} cp)
                            else
                                span.skill-name= skill.name
                                if (skill.cost)
                                        span.skill-cost.ms-2 (#{skill.cost} cp)


            .skill-source.my-1
                strong= skill.source.name
            if (skill.usage)
                span.skill-usage.me-2.d-inline Usage: #{skill.usage.name}
            if (skill.tags)
                for tag in skill.tags
                    span.skill-tag.me-2.d-inline [ #{tag.name} ]

            .skill-summary
                strong.me-1 Summary:
                !=marked.parseInline(skill.summary)

            if (skill.requires && skill.requires.length)
                p.my-1
                    strong.me-1 Requires
                        if _.uniq(_.pluck(skill.requires, 'name')).length > 1
                            |  #{skill.require_num} of:

                    if _.uniq(_.pluck(skill.requires, 'name')).length === 1
                        i #{skill.requires[0].name}
                    else
                        i #{_.pluck(skill.requires, 'name').join(', ')}


            if (skill.conflicts && skill.conflicts.length)
                p.my-1
                    strong.me-1 Conflicts with:
                    if _.uniq(_.pluck(skill.conflicts, 'name')).length === 1
                        | #{skill.conflicts[0].name}
                    else
                        | #{(_.pluck(skill.conflicts, 'name')).join(', ')}

            if skill.provides && skill.provides.length
                p.my-1
                    strong.me-1 Provides:
                    -
                        const provides = skill.provides.map( (provider) => {
                            let str = capitalize(provider.type);
                            str += ': ';
                            if (provider.name){
                                str += `${provider.name}: `
                            }
                            str += provider.value;
                            return str;
                        });
                    span.skill-provides= provides.join(', ')

            if skill.description
                strong.mb-0.mt-1.d-block Description
                .skill-description
                    != marked.parse(skill.description, {breaks: true})
            if skill.notes
                strong.mb-0.mt-1.d-block GM Notes
                .skill-notes !{marked.parse(skill.notes, {breaks: true})}
            p.my-1
                strong.me-1 Last Updated:
                |  #{skill.updatedFormatted}

            -
                const approved = skill.reviews.filter(review => {
                    return review.approved && (review.created.getTime() > skill.updated.getTime());
                });

            if approved.length
                -
                    const users = [];
                    for (const review of approved){
                        users.push(review.user.name);
                    }
                p.my-1
                    strong.me-1 Approved by:
                    span.skill-approvers= _.uniq(users).join(', ')

            if skill.reviews.filter(review => { return !review.approved }).length
                strong.mb-0.mt-1.d-block Review Comments

                ul.list-unstyled.skill-comments.ps-2
                    for review of skill.reviews
                        if review.content
                            li.media.border-bottom.border-light
                                .media-body
                                    h6.mt-0=review.user.name
                                        small.text-muted.ms-2=review.dateStr
                                    p.my-1=review.content

mixin reviewSkillActions(skill)
    .skill-actions.my-2.ps-3.pb-2.border-bottom
        button.btn.btn-sm.btn-outline-success.me-2.skill-approve-btn(data-skillid=skill.id data-csrfToken=csrfToken)
            i.fa.fas.fa-thumbs-up.me-1
            | Approve
        button.btn.btn-sm.btn-outline-info.me-2(
            id=`skill-comment-btn-${skill.id}`
            data-bs-toggle="collapse"
            data-bs-target=`#skill-comment-form-${skill.id}`
            aria-expanded="false" href='#'
            aria-controls=`skill-comment-form-${skill.id}`
        )
            i.fa.fas.fa-edit.me-1
            | Add Comment
    form.skill-comment-form.collapse.my-2.ps-3(
        id=`skill-comment-form-${skill.id}`
        aria-labelledby=`skill-comment-btn-${skill.id}`
    )
        textarea.form-control.skill-comment
        button.btn.btn-sm.btn-outline-success.skill-comment-save.mt-1.me-2(data-skillid=skill.id  data-csrfToken=csrfToken type="submit") Save Comment
        a.btn.btn-sm.btn-outline-danger.skill-comment-cancel.mt-1(
            data-bs-toggle="collapse"
            data-bs-target=`#skill-comment-form-${skill.id}`
            aria-expanded="false" href='#'
            aria-controls=`skill-comment-form-${skill.id}`
        ) Cancel



append scripts
    script.
        $(function() {
            $('[data-bs-toggle="tooltip"]').tooltip({
                container: 'body',
                placement: 'right',
                delay: { "show": 500, "hide": 100 }
            });
        });
