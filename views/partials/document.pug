mixin sourceDoc(source, backto)
    if source.display_to_pc || checkPermission('contrib')
        .row
            .col.document

                h1.d-inline.h3
                    if checkPermission('gm')
                        a.text-reset.source-name(href=`/skill_source/${source.id}/edit?backto=${backto}` data-toggle='tooltip' title='Edit Source')
                            | #{source.name}
                        if source.cost
                            span.ml-2 (#{source.cost} CP)
                    else
                        span.source-name #{source.name}
                        if source.cost
                            span.ml-2 (#{source.cost} CP)
                h4.d-inline.ml-2 (#{capitalize(source.type.name)})

        if (source.requires && source.requires.length)
            p.my-1
                strong.mr-1 Requires
                    if _.uniq(_.pluck(source.requires, 'name')).length > 1
                        |  #{source.require_num} of:

                if _.uniq(_.pluck(source.requires, 'name')).length === 1
                    | #{source.requires[0].name}
                else
                    | #{_.pluck(source.requires, 'name').join(', ')}


        if (source.conflicts && source.conflicts.length)
            p.my-1
                strong.mr-1 Conflicts with:
                if _.uniq(_.pluck(source.conflicts, 'name')).length === 1
                    | #{source.conflicts[0].name}
                else
                    | #{(_.pluck(source.conflicts, 'name')).join(', ')}



        if source.description
            .source-description !{marked(source.description, {breaks: true})}
        if checkPermission('gm') && source.notes
            h2 GM Notes
            .source-notes !{marked(source.notes, {breaks: true})}

        h2.h4 Skills
        ul.list-unstyled.ml-4
            for skill in source.skills
                if checkPermission('contrib') || (checkPermission('player') && skill.status.display_to_pc

                    li
                        strong #{skill.name==='TBD'?'Unnamed Skill':skill.name} (#{skill.cost||'Unset'} cp)

        +skillList(source.skills, backto)



mixin skillList(skills, backto)
    ul.list-unstyled
    for skill in skills
        if checkPermission('contrib') || (checkPermission('player') && skill.status.display_to_pc
            +skillDoc(skill, backto)



mixin skillDoc(skill, backto)
    li.media.mb-3.border-bottom.border-light.pl-3
        .media-body
            .row.mt-0
                h3.h5
                    if checkPermission('gm')
                        a.text-reset.skill-name(href=`/skill/${skill.id}/edit?backto=${backto}` data-toggle='tooltip' title='Edit Skill')
                            if skill.name==='TBD'
                                i.skill-name Unnamed Skill
                                if (skill.cost)
                                    span.skill-cost.ml-2 (#{skill.cost} cp)
                            else
                                span.skill-name= skill.name
                                if (skill.cost)
                                    span.skill-cost.ml-2 (#{skill.cost} cp)
                    else
                        if skill.name==='TBD'
                            i.skill-name Unnamed Skill
                            if (skill.cost)
                                span.skill-cost.ml-2 (#{skill.cost} cp)
                        else
                            span.skill-name= skill.name
                            if (skill.cost)
                                span.skill-cost.ml-2 (#{skill.cost} cp)
            if (skill.usage && skill.usage.display_name)
                .span.skill-usage.mr-2.d-inline Usage: #{skill.usage.name}
            if (skill.tags)
                for tag in skill.tags
                    if checkPermission('contrib') || tag.display_to_pc
                        .span.skill-tag.mr-2.d-inline [ #{tag.name} ]

            .skill-summary !{marked.parseInline(skill.summary)}

            if (skill.requires && skill.requires.length)
                p.my-1
                    strong.mr-1 Requires
                        if _.uniq(_.pluck(skill.requires, 'name')).length > 1
                            |  #{skill.require_num} of:

                    if _.uniq(_.pluck(skill.requires, 'name')).length === 1
                        i #{skill.requires[0].name}
                    else
                        i #{_.pluck(skill.requires, 'name').join(', ')}


            if (skill.conflicts && skill.conflicts.length)
                p.my-1
                    strong.mr-1 Conflicts with:
                    if _.uniq(_.pluck(skill.conflicts, 'name')).length === 1
                        | #{skill.conflicts[0].name}
                    else
                        | #{(_.pluck(skill.conflicts, 'name')).join(', ')}


            if skill.description
                .skill-description !{marked(skill.description, {breaks: true})}
            if checkPermission('gm') && skill.notes
                strong.mb-0.mt-1.d-block GM Notes
                .skill-notes !{marked(skill.notes, {breaks: true})}

mixin cardDoc(card)
    li.media.py-2.border-bottom.border-light.card-entry
        .media-body.border-left.border-white.px-2

            .row.my-0
                .col-sm-1
                    h5= capitalize(card.type)
                .col

                    .row
                        .col
                            strong.mr-1 Option One:
                            |  !{marked.parseInline(card.option_one)}
                    if (card.option_two)
                        .row
                            .col
                                strong.mr-1 Option Two:
                                |  !{marked.parseInline(card.option_two)}
                    if !_.isNull(card.ending)
                        .row.mt-2
                            .col
                                if card.ending === 0
                                    strong The game ends immediately.
                                else
                                    strong The game ends after up to #{card.ending} years.

                    if card.min_years
                        .row.mt-2
                            .col
                                if card.min_years !== card.max_years
                                    strong.mr-1 Then:
                                    |  Between #{card.min_years} and #{card.max_years} years pass
                                else
                                    strong.mr-1 Then:
                                    |  #{card.min_years} year#{card.min_years!==1?'s':''} pass#{card.min_years===1?'es':''}
                if checkPermission('gm')
                    .float-right.text-right
                        a.btn.btn-outline-secondary.btn-sm.card-edit-btn.invisible(href=`/card/${card.id}/edit?backto=document` title='Edit Card' data-toggle="tooltip")
                            i.fas.fa-edit


mixin deckCardDoc(card, years)
    li.media.py-2.border-bottom.border-light
        .media-body.border-left.border-white.px-2
            .row.mt-0
                .col-sm-1
                    h5= years
                .col

                    if card.story
                        | !{marked(card.story)}
                    else
                        i TBD


append scripts
    script.
        $(function() {
            $('[data-toggle="tooltip"]').tooltip({
                container: 'body',
                placement: 'right',
                delay: { "show": 500, "hide": 100 }
            });
            $('.card-entry').hover(showCardEdit, hideCardEdit);
        });

        function showCardEdit(e){
            $(this).find('.media-body').addClass('border-info')
            $(this).find('.media-body').removeClass('border-white')
            $(this).find('.card-edit-btn').removeClass('invisible');
        }
        function hideCardEdit(e){
            $(this).find('.media-body').addClass('border-white')
            $(this).find('.media-body').removeClass('border-info')
            $(this).find('.card-edit-btn').addClass('invisible');
        }

