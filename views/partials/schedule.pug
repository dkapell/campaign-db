mixin timeslotButtons(timeslot)
    button.btn.btn-outline-success.users-btn.btn-xs.mx-1.position-relative.busy-users-btn(
        role='button'
        data-bs-toggle='tooltip'
        title='Busy Attendees'
        data-panel-type='busy'
        data-type='busy-all'
        data-timeslot-id=timeslot.id
    )
        i.fas.fa-user-check.fa-fw
        span.position-absolute.top-0.start-100.translate-middle.badge.rounded-pill.bg-success.user-count

    button.btn.btn-outline-secondary.unscheduled-players-btn.unscheduled-users-btn.users-btn.btn-xs.mx-1.position-relative(
        style='z-index:100'
        role='button'
        data-bs-toggle='tooltip'
        title='Players'
        data-timeslot-id=timeslot.id
        data-type='player'
        data-panel-type='list'

    )
        i.fas.fa-user.fa-fw
        span.position-absolute.top-0.start-100.translate-middle.badge.rounded-pill.bg-secondary.user-count
    button.btn.btn-outline-secondary.unscheduled-staff-btn.unscheduled-users-btn.users-btn.btn-xs.mx-1.position-relative(
        role='button'
        data-bs-toggle='tooltip'
        title='Staff'
        data-timeslot-id=timeslot.id
        data-type='staff'
        data-panel-type='list'
    )
        i.fas.fa-users.fa-fw
        span.position-absolute.top-0.start-100.translate-middle.badge.rounded-pill.bg-secondary.user-count
    button.btn.btn-outline-info.all-users-btn.unscheduled-users-btn.users-btn.btn-xs.mx-1.position-relative(
        role='button'
        data-bs-toggle='tooltip'
        title='All Attendees'
        data-timeslot-id=timeslot.id
        data-type='all'
        data-panel-type='list'
    )
        i.fas.fa-globe.fa-fw
        span.position-absolute.top-0.start-100.translate-middle.badge.rounded-pill.bg-info.user-count

mixin sceneItem(scene, xAxisType, cellsPerSlot)

    -
        let timeslots = scene.timeslots.filter(timeslot => {
            return timeslot.scene_schedule_status === 'confirmed'
        });
        let locations = scene.locations.filter(location => {
            return location.scene_schedule_status === 'confirmed';
        });

        let locationIdx = 0;
        let playerCount = (scene.users.filter(user => {
            return (user.type==='player' && user.scene_schedule_status.match(/^(confirmed|suggested)$/) );
        })).length;

    while locationIdx < scene.locations_count
        -
            let cell = 'unscheduled'
            if (timeslots.length && locationIdx < locations.length){
                cell = `cell-timeslot-${timeslots[0].id}-location-${locations[locationIdx].id}`
            }
            let size = `grid-row:span ${scene.timeslot_count}`;
            if (xAxisType !== 'location'){
                size = `grid-column: span ${scene.timeslot_count * cellsPerSlot}`
            }
        .scene-item.d-none(
            id=`scene-${scene.id}-${locationIdx}`
            style=`${size}; z-index:10`
            data-scene-id=scene.id
            data-scene-name=scene.name
            data-location-idx=locationIdx
            data-timeslot-count=scene.timeslot_count
            cell=cell
            data-tags=_.pluck(scene.tags, 'name')
            status=scene.status
            class=scene.issues.filter(issue => { return issue.level === 'warning' && !issue.ignored}).length?'validation-warning':''
            class=scene.issues.filter(issue => { return issue.level === 'info' && !issue.ignored}).length?'validation-info':''
            data-scheduler="false"
            data-open=(scene.player_count_max - playerCount > 0 || scene.for_anyone)?'true':'false'
        )
            .scene-display.m-1.px-1.pb-0.bg-body.border.d-block.flex-grow-1
                +sceneBody(scene, locationIdx, false)
        - locationIdx++

mixin sceneScheduleItem(scene, xAxisType, cellsPerSlot)

    -
        let timeslots = scene.timeslots.filter(timeslot => {
            return timeslot.scene_schedule_status === 'confirmed'
        });
        if (!timeslots.length){
            timeslots = scene.timeslots.filter(timeslot => {
                return timeslot.scene_schedule_status === 'suggested'
            });
        }
        let locations = scene.locations.filter(location => {
            return location.scene_schedule_status === 'confirmed';
        });
        if (!locations.length){
            locations = scene.locations.filter(location => {
               return location.scene_schedule_status === 'suggested';
            });
        }

        let locationIdx = 0

        let playerCount = (scene.users.filter(user => {
            return (user.type==='player' && user.scene_schedule_status.match(/^(confirmed|suggested)$/) );
        })).length;
    while locationIdx < scene.locations_count
        -
            let cell = 'unscheduled'
            if (timeslots.length && locationIdx < locations.length){
                cell = `cell-timeslot-${timeslots[0].id}-location-${locations[locationIdx].id}`
            }
            let size = `grid-row:span ${scene.timeslot_count}`;
            if (xAxisType !== 'location'){
                size = `grid-column: span ${scene.timeslot_count * cellsPerSlot}`
            }

            // `grid-row:span ${scene.timeslot_count}; z-index:${10-scene.timeslot_count};`
        .scene-item.d-none(
            id=`scene-${scene.id}-${locationIdx}`
            style=`${size}; z-index:10`
            data-scene-id=scene.id
            data-scene-name=scene.name
            data-location-idx=locationIdx
            data-timeslot-count=scene.timeslot_count
            data-tags=_.pluck(scene.tags, 'name')
            locations=JSON.stringify(scene.locations)
            timeslots=JSON.stringify(scene.timeslots)
            cell=cell
            status=scene.status
            class=scene.scene_schedule_status!=='confirmed'?'scene-item-draggable':''
            class=scene.issues.filter(issue => { return issue.level === 'warning' && !issue.ignored}).length?'validation-warning':''
            class=scene.issues.filter(issue => { return issue.level === 'info' && !issue.ignored}).length?'validation-info':''
            data-scheduler="true"
            data-setup=scene.setup_slots
            data-cleanup=scene.cleanup_slots
            data-assign-players=scene.assign_players?'true':'false'
            data-open=(scene.player_count_max - playerCount > 0 || scene.for_anyone)?'false':'true'
        )
            .scene-display.m-1.px-1.pb-0.bg-body.border.d-block.flex-grow-1
                if xAxisType !== 'location'
                    .d-flex.h-100
                        if checkPermission('admin, scheduler') && currentCampaign.schedule_user_id === activeUser.id
                            .flex-shrink-1.handle
                                .d-flex.align-items-center.h-100
                                    i.fas.fa-grip-lines-vertical.handle-icon.text-info.pe-1
                        .flex-grow-1
                            .float-end
                                i.fas.fa-plus-circle.text-warning.status-indicator.suggested-indicator.ps-1(
                                    title='Suggested'
                                    data-bs-toggle='tooltip'
                                )
                            +sceneBody(scene, locationIdx, true)
                else
                    if checkPermission('admin, scheduler') && currentCampaign.schedule_user_id === activeUser.id
                        .row.my-0
                            .col
                                .float-end
                                    i.fas.fa-plus-circle.text-warning.status-indicator.suggested-indicator(
                                        title='Suggested'
                                        data-bs-toggle='tooltip'
                                    )
                                .handle.text-center
                                    i.fas.fa-grip-lines.handle-icon.text-info
                    .vertical
                        +sceneBody(scene, locationIdx, true)
        - locationIdx++

mixin sceneBody(scene, locationIdx, forScheduler)
    .d-flex.scene-detail-header
        if checkPermission('contrib')
            .flex-shrink-1
                i.fas.fa-exclamation-triangle.scene-warning.me-1.text-warning.issue-icon(
                    title='Validation Warning'
                    data-bs-html='true'
                    data-bs-toggle='popover'
                )
                i.fas.fa-info-circle.scene-info.me-1.text-info.issue-icon(
                    title='Validation Info'
                    data-bs-html='true'
                    data-bs-toggle='popover'

                )
        .flex-grow-1
            a.scene-name.d-block.ms-1.text-body.link-underline-info.link-offset-1.link-underline-opacity-50.link-underline-opacity-100-hover(
                href='#'
                title='Show/Hide Details'
                data-bs-toggle='collapse'
                data-bs-target=`#scene-details-${scene.id}-${locationIdx}`
                aria-expanded="false"
                aria-controls=`scene-details-${scene.id}-${locationIdx}`
            )
                if checkPermission('event') || !scene.player_name
                    = scene.name
                else
                    = scene.player_name
                if scene.locations_count > 1
                    span.scene-location-idx.ms-2 (##{locationIdx+1})
                span.ps-2.float-end
                    i.fa.fa-chevron-up
                    i.fa.fa-chevron-down
                if forScheduler
                    span.float-end.user-drop-indicator.mx-1.text-info.user-drop-requested Requested
                    span.float-end.user-drop-indicator.mx-1.text-success.user-drop-required Required
                    span.float-end.user-drop-indicator.mx-1.text-danger.user-drop-rejected Rejected

        if forScheduler
            .flex-shrink-1
                i.fas.fa-check-circle.text-success.status-indicator.confirmed-indicator.ps-1(
                    title='Confirmed'
                    data-bs-toggle='tooltip'
                )
                if !checkPermission('admin, scheduler') && currentCampaign.schedule_user_id === activeUser.id
                    i.fas.fa-plus-circle.text-warning.status-indicator.suggested-indicator.ps-1(
                        title='Suggested'
                        data-bs-toggle='tooltip'
                    )


    .scene-details.px-1.pb-1.collapse(id=`scene-details-${scene.id}-${locationIdx}`)
        .text-center.my-1
            .spinner-border.m-auto(role="status" style="width: 1rem; height: 1rem;")
                .visually-hidden Loading

mixin nullBusyItem(xAxisType, cellsPerSlot)

    -
        let cell = 'unused'
        let size = `grid-row:span 1`;
        if (xAxisType !== 'location'){
            size = `grid-column: span ${cellsPerSlot}`
        }

    .d-none#null-busy-item(
        style=`${size}; z-index:10`
        cell=cell
        data-scheduler="false"
        data-busy="true"
    )
        .scene-display.m-1.px-1.pb-0.bg-body.border.border-info.d-block.flex-grow-1
            strong.text-body.title
