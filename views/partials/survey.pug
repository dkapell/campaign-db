include ./image

mixin customSurveyFieldInput(namePrefix, idPrefix, field, currentValue, isStaff, options={})
    - const disabled = (!isStaff && field.editable_by ==='gm') || options.disabled
    div.custom-event-field(
        data-visible_to=field.visible_to?field.visible_to:'all'
        data-editable_by=field.editable_by?field.editable_by:'submitter'
    )
        case field.type
            when 'text'
                label.control-label(for=`${idPrefix}_${field.id}`)= field.name
                    if field.required
                        span.ms-1.text-danger *
                    if options.showDaysBefore && field.days_before
                        span.ms-1 ( #{field.days_before} Days Before )

                if field.description
                    .form-text!=marked.parseInline(field.description, {breaks:true})

                input.form-control( id=`${idPrefix}_${field.id}` type="text" name=`${namePrefix}[${field.id}]` value=currentValue required=field.required data-isrequired=field.required disabled=disabled)

            when 'longtext'
                if options.disabled
                    label.control-label(for=`${idPrefix}_${field.id}`)= field.name
                        if options.showDaysBefore && field.days_before
                            span.ms-1 ( #{field.days_before} Days Before )
                    if field.description
                        .form-text!=marked.parseInline(field.description, {breaks:true})
                    .text-bg-light.border.rounded.p-2
                        if currentValue && !currentValue.match(/^\s*$/)
                            != marked.parseInline(currentValue, {breaks:true})
                        else
                            i No Answer Provided
                else
                    -
                        const rows = field.rows?Number(field.rows):3;
                        const height = rows * 24;
                        let label = field.name;

                        if (options.showDaysBefore && field.days_before) {
                            label += ` ( ${field.days_before} Days Before )`}

                    +markdownEditor(label, `${idPrefix}_${field.id}`, `${namePrefix}[${field.id}]`, rows, height, currentValue, false, {required:field.required, disabled:disabled, maxlength:field.maxlength, description:field.description, saveIndicator:true, hideMarkdown:options.hideMarkdown})

            when 'boolean'
                .form-check.form-switch
                    input.form-check-input(type="checkbox" id=`${idPrefix}_${field.id}` name=`${namePrefix}[${field.id}]` checked=currentValue disabled=disabled)
                    if field.description
                        .form-text!=marked.parseInline(field.description, {breaks:true})

                    label.form-check-label(for=`${idPrefix}_${field.id}`)= field.name
                        if options.showDaysBefore && field.days_before
                            span.ms-1 ( #{field.days_before} Days Before )

            when 'dropdown'
                label.control-label(for=`${idPrefix}_${field.id}`)= field.name
                    if field.required
                        span.ms-1.text-danger *
                    if options.showDaysBefore && field.days_before
                        span.ms-1 ( #{field.days_before} Days Before )
                if field.description
                    .form-text!=marked.parseInline(field.description, {breaks:true})
                .input-group
                    select.form-select.select2(id=`${idPrefix}_${field.id}` name=`${namePrefix}[${field.id}]` data-placeholder=field.placeholder required=field.required data-isrequired=field.required disabled=disabled)
                        if field.placeholder
                            option
                        each item in field.options
                            option(value=item selected=item===currentValue)= item
                    button.btn.btn-outline-primary.survey-dropdown-clear-btn
                        i.fa.fa-times-circle.me-1
                        | Clear

            when 'image'
                +imageUploadField(field.name, `${idPrefix}_${field.id}`, `${namePrefix}[${field.id}]`, currentValue, {
                    required:field.required,
                    showDaysBefore: options.showDaysBefore,
                    daysBefore: field.days_before,
                    immediate: options.immediate,
                    disabled: disabled,
                    description: field.description
                })

            when 'text content'
                if field.content
                    div.my-3.border-bottom.pb-2!= marked.parseInline(field.content, {breaks:true})

            when 'scene'
                label.control-label(for=`${idPrefix}_${field.id}`)= field.name
                if field.description
                    .form-text!=marked.parseInline(field.description, {breaks:true})

                .sceneList(
                    id='${idPrefix}_${field.id'
                    style='display:none'
                    disabled=disabled
                    data-field=field
                    data-user-type-map=currentCampaign.user_type_map
                )
                .col-sm-6.offset-sm-3.text-center.sceneListLoading
                    .spinner-border.m-5(role="status" style="width: 3rem; height: 3rem;")
                        .visually-hidden Table is Loading


mixin customSurveyFieldDisplay(field, value)
    if field.type !== 'text content'
        -
            const noResponse = ((field.type !== 'boolean' && !value) || (''+value).match(/^\s*$/))
        .row.my-2.surveyResponse(
            class=noResponse?'noResponse':''
            style=noResponse?'display:none':''
        )
            .col
                h5= field.name
                if field.type === 'scene'
                    each feedback in value
                        +displaySceneFeedback(feedback)
                else
                    .card.text-bg-light.ms-md-4
                        .card-body.p-2
                            if noResponse
                                i No Answer Provided
                            else
                                case field.type
                                    when 'text'
                                        != marked.parseInline(value, {breaks:false})
                                    when 'longtext'
                                        != marked.parseInline(value, {breaks:true})
                                    when 'dropdown'
                                        = value
                                    when 'boolean'
                                        =value?'Yes':'No'
                                    when 'image'
                                        image.d-block.img-fluid.image-container(
                                            src=value.thumbnailUrl
                                        )


mixin displaySceneFeedback(feedback)
    .row.my-2
        .col
            h5.ms-md-2
                a(href=`/scene/${feedback.scene.id}` target='_blank')= feedback.scene.name
                    if feedback.scene.player_name
                        span.ms-2 (#{feedback.scene.player_name})
            if checkPermission('gm') && feedback.gm_feedback
                strong.ms-md-4 GM Feedback
                .card.text-bg-light.ms-md-4.my-1
                    .card-body.p-2
                        != marked.parseInline(feedback.gm_feedback)
            if feedback.npc_feedback
                strong.ms-md-4 NPC Feedback
                .card.text-bg-light.ms-md-4.my-1
                    .card-body.p-2
                        != marked.parseInline(feedback.npc_feedback)


mixin surveyDefinitionHeader()
    .row.my-2#survey_field-header-row
        .col-lg
            h4 Survey Fields
        .col-lg.text-end
            button.btn.btn-sm.btn-outline-success.add-survey_field-btn
                i.fa.fa-plus.me-1
                | Add Field

mixin surveyDefinitionFooter(show)
    .row.my-2#survey_field-footer-row(style=show?'':'display:none')
        .col-lg.text-end
            .border-top.border-2.pt-2.px-2
                button.btn.btn-sm.btn-outline-success.add-survey_field-btn
                    i.fa.fa-plus.me-1
                    | Add Field

mixin surveyField(field,  idx)
    .survey_field-row.border-top.border-2.my-1.px-2.pb-2(id=`survey_field-${idx}` )
        input.sort-order.survey_field-input(
            type='hidden'
            id=`survey_field_${idx}_sort_order`
            name=`survey[definition][${idx}][sort_order]`
            value=idx
            data-fieldtype='sort_order'
        )
        input.survey_field-input(
            type='hidden'
            id=`survey_field_${idx}_id`
            name=`survey[definition][${idx}][id]`
            value=field.id
            data-fieldtype='id'
        )
        .row.my-0
            .col.text-center
                .handle(
                        style='cursor:ns-resize'
                        for=`survey_field_${idx}_name`
                        data-fieldtype='name'
                    )
                        i.fas.fa-grip-lines.fa-fw
        .row.my-1
            .col-lg-4
                .form-floating
                    input.form-control.survey_field-input(
                        type="text",
                        placeholder="Name"
                        name=`survey[definition][${idx}][name]`
                        value=field.name
                        id=`survey_field_${idx}_name`
                        data-fieldtype='name'
                        data-required="true"
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_name`
                        data-fieldtype='name'
                    ) Name

            .col-lg-2
                .form-floating
                    select.form-select.survey_field-input.survey_field-type(
                        name=`survey[definition][${idx}][type]`
                        id=`survey_field_${idx}_name`
                        data-fieldtype='type'
                        data-required="true"
                        data-placeholder='Type'
                    )
                        option
                        each type in ['text', 'longtext', 'boolean', 'dropdown', 'image', 'text content', 'scene']
                            option(value=type selected=type===field.type)= type

                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_type`
                        data-fieldtype='type'
                    ) Type
            .col-lg-2
                .form-floating
                    select.form-select.survey_field-input(
                        name=`survey[definition][${idx}][visible_to]`
                        id=`survey_field_${idx}_visible_to`
                        data-fieldtype='visible_to'
                        data-placeholder='Visibility'
                    )
                        - field.visible_to ||= 'all';
                        option
                        each visibility in ['all', 'player', 'staff']
                            option(value=visibility selected=visibility===field.visible_to)= visibility
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_visible_to`
                        data-fieldtype='visible_to'
                    ) Visible To

            .col-lg-2
                .form-floating
                    input.form-control.survey_field-input(
                        type="text"
                        placeholder="Icon"
                        name=`survey[definition][${idx}][icon]`
                        value=field.icon
                        id=`survey_field_${idx}_icon`
                        data-fieldtype='icon'
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_icon`
                        data-fieldtype='icon'
                    ) Icon

            .col-lg-2.text-end.align-bottom
                button.btn.btn-outline-success.add-description-btn.align-bottom(data-bs-toggle="tooltip" title='Add Description' data-placement="right")
                    i.far.fa-file-alt.fa-fw

                button.btn.btn-outline-danger.remove-survey_field-btn.align-bottom.ms-1(data-bs-toggle="tooltip" title='Remove Field' data-placement="right")
                    i.fas.fa-trash.fa-fw

        .row.my-2.field-options
            .col-lg-6.ps-4
                label.control-label Options
                br
                .form-check.form-switch.form-check-inline.survey_field-input
                    input.form-check-input.survey_field-input.survey_field-editable_by(
                        type='checkbox'
                        name=`survey[definition][${idx}][editable_by]`
                        id=`survey_field_${idx}_editable_by`
                        data-fieldtype='editable_by'
                        value='gm'
                        checked=field.editable_by==='gm'
                    )
                    label.form-check-label(
                        for=`survey_field_${idx}_required`
                        data-fieldtype='required'
                    ) GM only Edit

                .form-check.form-switch.form-check-inline.survey_field-input
                    input.form-check-input.survey_field-input.survey_field-required(
                        type='checkbox'
                        name=`survey[definition][${idx}][required]`
                        id=`survey_field_${idx}_required`
                        data-fieldtype='required'
                        checked=field.required
                    )
                    label.form-check-label(
                        for=`survey_field_${idx}_required`
                        data-fieldtype='required'
                    ) Required

                .form-check.form-switch.form-check-inline.survey_field-input
                    input.form-check-input.survey_field-input.survey_field-on_checkin(
                        type='checkbox'
                        name=`survey[definition][${idx}][on_checkin]`
                        id=`survey_field_${idx}_on_checkin`
                        data-fieldtype='on_checkin'
                        checked=field.on_checkin
                    )
                    label.form-check-label(
                        for=`survey_field_${idx}_on_checkin`
                        data-fieldtype='on_checkin'
                    ) On Check-in Form
            .col-lg-2
                - field.days_before ||= 0;
                .form-floating
                    input.form-control.survey_field-input.form-control-sm.survey_field-days_before(
                        type="number",
                        placeholder="Days Before"
                        name=`survey[definition][${idx}][days_before]`
                        value=field.days_before
                        id=`survey_field_${idx}_days_before`
                        data-fieldtype='days_before'
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_days_before`
                        data-fieldtype='days_before'
                    ) Show N days before

            .col-lg-2.textarea-options.survey_field-type-options
                - field.rows ||= 3
                .form-floating
                    input.form-control.survey_field-input.form-control-sm(
                        type="number",
                        placeholder="Rows"
                        name=`survey[definition][${idx}][rows]`
                        value=field.rows
                        id=`survey_field_${idx}_rows`
                        data-fieldtype='rows'
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_rows`
                        data-fieldtype='rows'
                    ) Rows

            .col-lg-2.textarea-options.survey_field-type-options
                .form-floating
                    input.form-control.survey_field-input.form-control-sm(
                        type="number",
                        placeholder="Unlimited"
                        name=`survey[definition][${idx}][maxlength]`
                        value=field.maxlength
                        id=`survey_field_${idx}_maxlength`
                        data-fieldtype='maxlength'
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_maxlength`
                        data-fieldtype='maxlength'
                    ) Max Length


        .row.my-2.dropdown-options.survey_field-type-options
            .col-lg-8.ps-4
                .form-floating
                    input.form-control.survey_field-input.form-control-sm(
                        type="text",
                        placeholder="Option 1, Option 2"
                        name=`survey[definition][${idx}][options]`
                        value=field.options?field.options.join(', '):''
                        id=`survey_field_${idx}_options`
                        data-fieldtype='options'
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_options`
                        data-fieldtype='options'
                    ) Options (comma seperated)
            .col-lg-4
                .form-floating
                    input.form-control.survey_field-input.form-control-sm(
                        type="text",
                        placeholder="Placeholder Text"
                        name=`survey[definition][${idx}][placeholder]`
                        value=field.placeholder
                        id=`survey_field_${idx}_placeholder`
                        data-fieldtype='placeholder'
                    )
                    label.control-label.survey_field-label(
                        for=`survey_field_${idx}_placeholder`
                        data-fieldtype='placeholder'
                    ) Placeholder

        .row.my-2.markdown-options.survey_field-type-options
            .col-lg.ps-4
                .form-floating
                    textarea.form-control.markdown-editor.survey_field-input(
                        id= `survey_field_${idx}_content`
                        rows=3
                        name=`survey[definition][${idx}][content]`
                        data-size= size
                        data-fieldtype='content'
                        style='height: 100px'
                    )
                        = field.content
                    label.control-label.mb-0.d-inline(for=`survey_field_${idx}_content`) Content


                small.form-text.text-muted.d-inline.ms-2 Supports
                    a.ms-1(href='https://commonmark.org/help/' target='_blank') Markdown
                        i.fas.fa-external-link-alt.ms-1
        .row.my-2.field-description
             .col-lg.ps-4
                .form-floating
                    textarea.form-control.markdown-editor.survey_field-input(
                        id= `survey_field_${idx}_description`
                        rows=3
                        name=`survey[definition][${idx}][description]`
                        data-size= size
                        data-fieldtype='description'
                        style='height: 100px'
                    )
                        = field.description
                    label.control-label.mb-0.d-inline(for=`survey_field_${idx}_description`) Description

                small.form-text.text-muted.d-inline.ms-2 Supports
                    a.ms-1(href='https://commonmark.org/help/' target='_blank') Markdown
                        i.fas.fa-external-link-alt.ms-1

mixin questionScenes(scenes, userScenes)
    .row.mb-1
        .col.px-2
            .table-responsive
                table.table.table-sm.table-striped
                    thead
                        tr
                            th Timeslot
                            th Scene Name
                            th.text-end Actions
                    tbody
                        - const userSceneList = [];
                        each scene in userScenes
                            -
                                if (scene.skipped){
                                    continue;
                                }
                                if (_.indexOf(userSceneList, scene.id) !== -1){
                                    continue;
                                }
                                userSceneList.push(scene.id);
                                let hasFeedback = false;
                                if (scene.gm_feedback && scene.gm_feedback !== ''){
                                    hasFeedback = true;
                                } else if (scene.npc_feedback && scene.npc_feedback !== ''){
                                    hasFeedback = true;
                                }
                                let sceneName = scene.name;
                                if (scene.player_name && isPlayer){
                                    sceneName += ` (${scene.player_name})`
                                }

                            tr
                                td
                                    small #{scene.timeslots[0].name}
                                        if scene.timeslots[0].display_name
                                            span.ms-1 (#{scene.timeslots[0].display_name})
                                td= sceneName
                                    if hasFeedback
                                        .badge.text-bg-success.ms-2.d-md-inline
                                            i.fas.fa-check-circle.me-1
                                            | Feedback Provided
                                td.text-end
                                    .btn-group
                                        -
                                            let btnText = 'Provide Feedback'
                                            if (disabled){
                                                if (hasFeedback){
                                                    btnText = 'View Feedback'
                                                } else {
                                                    btnText = 'No Feedback'
                                                }
                                            } else {
                                                if (hasFeedback){
                                                    btnText = 'Edit Feedback'
                                                }
                                            }

                                        if !disabled || hasFeedback
                                            button.btn.btn-sm.btn-outline-primary.feedback-edit.d-inline-block(
                                                role='button'
                                                data-scene-id=scene.id
                                                title=btnText
                                                data-scene-name=sceneName
                                                data-bs-toggle='tooltip'
                                                data-disabled=disabled?'true':'false'
                                            )
                                                if disabled
                                                    i.fas.fa-eye.feedback-icon
                                                    .d-none.d-lg-inline.ms-1 #{btnText}
                                                else
                                                    i.fas.fa-edit.feedback-icon
                                                    .d-none.d-lg-inline.ms-1 #{btnText}
                                        if !disabled
                                            button.btn.btn-sm.btn-outline-danger.ms-1.feedback-remove.d-inline-block(
                                                role='button'
                                                data-scene-id= scene.id
                                                data-bs-toggle='tooltip'
                                                title="Remove from List"
                                                disabled=disabled
                                            )
                                                i.fas.fa-trash.feedback-icon
                                                span.ms-1.d-none.d-xl-inline Remove
    if !disabled
        .row.mb-2
            .col.px-2
                .input-group.scenePicker
                    select.form-select.select2.scene-select(data-placeholder='Select an scene to add')
                        option
                        for scene in scenes
                            -
                                let sceneName = scene.name;
                                if (scene.player_name && isPlayer){
                                    sceneName += ` (${scene.player_name})`
                                }
                            if _.indexOf(userSceneList, scene.id) === -1
                                option(value=scene.id) #{scene.timeslots[0].name}: #{sceneName}

                    button.btn.btn-outline-success.feedback-add( type="button")
                        span.bi.bi-plus-lg
                        |  Add Scene


mixin surveyModal()
    .modal.modal-fullscreen-lg-down.fade#surveyModal(role="dialog" tabindex="-1" aria-labelledby="popupModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false")
        .modal-dialog.modal-xl.modal-dialog-centered(role="document")
            .modal-content
                .modal-header
                    h5.modal-title
                    button.btn-close#dismissPopupModal(type="button", data-bs-dismiss="modal" area-label="Close")
                .modal-body
                .modal-footer
                    button.btn.btn-secondary.close-btn(type="button", data-bs-dismiss="modal") Cancel
                    span.extra-buttons
                    button.btn.btn-primary.save-btn(type="submit") Save
