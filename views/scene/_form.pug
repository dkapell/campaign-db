if (backto)
    input(type="hidden" name="backto" value=backto)

.row.my-2
    label.col-form-label.col-md-2(for="scene_name") Name
        span.ms-1.text-danger *
    .col-md
        input.form-control#scene_name(type="text" placeholder="Scene Name" name="scene[name]" value=scene.name required)
    label.col-form-label.col-md-1(for="scene_request_status") Status
        span.ms-1.text-danger *
    .col-md-2
        select.form-select.complex-select2#scene_request_status(
            name="scene[status]"
            data-placeholder='Status'
            disabled=(scene.status==='confirmed'||scene.status==='scheduled') && !checkPermission('admin')
            required
        )
            option
            each status in ['new', 'ready', 'scheduled', 'confirmed', 'postponed']

                -
                    let badgeClass = 'dark';
                    switch (status){
                        case 'ready': badgeClass = 'info'; break;
                        case 'scheduled': badgeClass = 'warning'; break;
                        case 'confirmed': badgeClass = 'success'; break;
                        case 'postponed': badgeClass = 'danger'; break;
                    }
                    if ((status === 'scheduled' || status === 'confirmed') && !checkPermission('admin')){
                        badgeClass += ' disabled'
                    }
                option(
                    value=status
                    selected=status===scene.status
                    data-text=`<span class="badge text-bg-${badgeClass}">${capitalize(status)}</span>`
                    data-html=`<span class="text-${badgeClass}">${capitalize(status)}</span>`
                    disabled=(status === 'scheduled' || status === 'confirmed' ) && !checkPermission('admin')
                )= capitalize(status)



.row.my-2
    label.col-form-label.col-md-2(for="scene_event_id") Event
    .col-md
        select.form-select.complex-select2#scene_event_id(name='scene[event_id]')
            option(
                value=-1
                selected=!scene.event_id
                data-text='Unassigned'
                data-html='Unassigned'
            ) Unassigned
            for event in events
                option(
                    value=event.id
                    selected=scene.event_id===event.id
                    data-text=event.name
                    data-html=`${event.name}${(event.start_time < new Date())?'<span class="badge text-bg-info float-end">Past</span>':''}`

                )= event.name

.row.my-2
    label.col-form-label.col-md-1(for="scene_tags") Tags
    .col-md
        select.form-select.tag-select2#scene_tags(multiple, name="scene[tags]" data-placeholder="Tags")
            for tag in tags
                -let selected = false;
                -if (_.findWhere(scene.tags, {id:tag.id})) { selected = true; }
                -if (scene.tags && scene.tags.indexOf(tag.id) !== -1) { selected = true; }
                option(value=tag.id selected=selected)= tag.name
            for tag in scene.tags
                if isNaN(tag) && !_.isObject(tag)
                    option(value=tag selected=true)= tag

    label.col-form-label.col-md-2(for="scene_prereqs") Prereq Scenes
    .col-md
        select.form-select.select2#scene_prereqs(name='scene[prereqs]' multiple)
            option
            each prereq in scenes
                if scene.id && prereq.id === scene.id
                    - continue;
                if prereq.event_id && new Date(prereq.event.end_time) < new Date()
                    - continue;
                -
                    let selected = false;
                    if (_.indexOf(scene.prereqs, prereq.id) !== -1){ selected = true }
                    if (_.findWhere(scene.prereqs, {id: prereq.id})){ selected = true }
                option(value=prereq.id selected=selected)=prereq.name

fieldset.my-2.border.p-2.rounded
    label.h5.w-100.mb-0#scene-details-heading( role="button" for="scene-details", data-bs-toggle="collapse" data-bs-target="#scene-details" aria-expanded="false") Scene Details
        #display-to-players.badge.text-bg-info.mx-2 Display To Players
        #has-player-facing-name.badge.text-bg-info.mx-2 Player-Facing Name
        #has-description-badge.badge.text-bg-info.mx-2 Has Description

        span.float-end.ps-2
            i.fa.fa-chevron-up
            i.fa.fa-chevron-down


    #scene-details.collapse(aria-labelledby="scene-details-heading")
        .row.my-2
            label.col-form-label.col-md-2(for="scene_player_name") Player-Facing Name
            .col-md
                input.form-control#scene_player_name(type="text" placeholder="Player-Facing Name (Optional)" name="scene[player_name]" value=scene.player_name)
            .col-xl-4.offset-xl-0.offset-3
                 .form-check.form-switch
                    input.form-check-input#scene_display_to_pc(type="checkbox", name="scene[display_to_pc]", checked=scene.display_to_pc)
                    label.form-check-label(for="scene_display_to_pc") Display Scene to Player(s) when Confirmed
        .row.my-2
            label.col-form-label.col-md-2(for="scene_staff_url") Staff Writeup
            .col-md
                input.form-control#scene_staff_url(type="text" placeholder="Staff Writeup URL" name="scene[staff_url]" value=scene.staff_url)

            label.col-form-label.col-md-2(for="scene_player_url") Player Writeup
            .col-md
                input.form-control#scene_player_url(type="text" placeholder="Player Writeup URL" name="scene[player_url]" value=scene.player_url)
        .row.my-2
            .col-md
                +markdownEditor('Description (Player-Visible)', 'scene_description', 'scene[description]', 5, 75, scene.description, true)
        .row.my-2
            .col-md
                +markdownEditor('Scheduling Notes (Staff-Only)', 'scene_schedule_notes', 'scene[schedule_notes]', 3, 50, scene.schedule_notes, false)

.row.my-3
    .col
        .row.mb-2
            .col

                .float-end
                    a.btn.btn-sm.btn-outline-primary#locations-button-combat.me-1(
                        href='#'
                        data-bs-toggle='tooltip'
                        title='Request all Combat locations currently set to \'None\''
                        ) All Combat
                    a.btn.btn-sm.btn-outline-primary#locations-button-non-combat.me-1(
                        href='#'
                        data-bs-toggle='tooltip'
                        title='Request all non-Combat locations currently set to \'None\''
                        ) All Non-Combat
                    a.btn.btn-sm.btn-outline-danger#locations-button-clear(
                        href='#'
                        data-bs-toggle='tooltip'
                        title='Set all \'Requested\' to \'None\''
                        ) Clear
                h5 Locations
        .row.my-2
            label.col-form-label.col-md(for="scene_location_count") Location Count
                span.ms-1.text-danger *
            .col-md-4
                input.form-control.form-control-sm#scene_location_count(type="number" placeholder="Locations" name="scene[locations_count]" value=scene.locations_count)
        .row.my-2
            .col
                ul.list-group
                    each location in locations
                        - const sceneLocation = _.findWhere(scene.locations, {id: location.id}) || {};

                        +sceneLocationInput(location, sceneLocation.scene_request_status, sceneLocation.scene_schedule_status)
    .col
        .row.mb-2
            .col
                .float-end
                    a.btn.btn-sm.btn-outline-primary#timeslots-button-no-meals.me-1(
                        href='#'
                        data-bs-toggle='tooltip'
                        title='Request all regular timeslots currently set to \'None\''
                    ) All Except Meals
                    a.btn.btn-sm.btn-outline-primary#timeslots-button-all.me-1(
                        href='#'
                        data-bs-toggle='tooltip'
                        title='Request all regular timeslots currently set to \'None\''
                    ) All
                    a.btn.btn-sm.btn-outline-danger#timeslots-button-clear(
                        href='#'
                        data-bs-toggle='tooltip'
                        title='Set all \'Requested\' to \'None\''
                    ) Clear
                h5 Timeslots
        .row.my-2
            label.col-form-label.col-md(for="scene_timeslot_count") Timeslot Count
                span.ms-1.text-danger *
            .col-md-4
                input.form-control.form-control-sm#scene_timeslot_count(type="number" placeholder="Timeslots" name="scene[timeslot_count]" value=scene.timeslot_count)
        .row.my-2
            .col
                ul.list-group
                    each timeslot in timeslots
                        - const sceneTimeslot = _.findWhere(scene.timeslots, {id: timeslot.id}) || {};
                        +sceneTimeslotInput(timeslot, sceneTimeslot.scene_request_status, sceneTimeslot.scene_schedule_status)

    .col
        if currentCampaign.schedule_players
            .row.mb-3
                .col.scene-user-picker-container
                    h5 Players
                    .row.my-1
                        label.col-form-label.col-lg(for="scene_player_count") Total Player Count
                            span.ms-1.text-danger *
                        .col-lg-5
                            .input-group.input-group-sm#scene_player_count
                                input.form-control.scene-user-count#scene_player_count_min(type="number" placeholder="Min" name="scene[player_count_min]" value=scene.player_count_min)
                                .input-group-text to
                                input.form-control.scene-user-count#scene_player_count_max(type="number" placeholder="Max" name="scene[player_count_max]" value=scene.player_count_max)

                    ul.my-1.list-group.scene-user-list#scene-player-list
                        each user in scene.users
                            if user.type === 'player'
                                +sceneUserInput(user, user.scene_request_status, user.scene_schedule_status)
                        +sceneUserInput({id:'new', typeForDisplay:'placeholder'}, 'requested', 'unscheduled')
                    .input-group
                        select.form-select.complex-search-select2.scene-user-picker#scene-player-picker(data-placeholder='Player')
                            option
                            each user in users
                                if user.type === 'player'
                                    -
                                        let tagString = user.tags.length?'<br>':'';
                                        for (const tag of user.tags){
                                            tagString += `<span class="badge text-bg-info mx-1">${tag.name}</span>`
                                        }
                                        let characterString = '';
                                        if (user.character){
                                            characterString = `<span class="mx-1">(${user.character.name})</span>`
                                        }
                                    option(
                                        value=user.id
                                        data-user=user
                                        data-type='Player'
                                        title=user.name
                                        data-text=`${user.name}${characterString}`
                                        data-html=`${user.name}${characterString}${tagString}`
                                        data-search=`${user.name} ${characterString} ${_.pluck(user.tags, 'name').join(' ')}`
                                    ) #{capitalize(user.name)}: #{_.pluck(user.tags, 'name').join(', ')}
                        button.btn.btn-outline-dark.add-user-btn Request
        .row.mb-3
            .col.scene-user-picker-container
                .row.mb-2
                    .col
                        .float-end
                            a.btn.btn-sm.btn-outline-primary#staff-require-me-btn(
                                href='#'
                                data-bs-toggle='tooltip'
                                title='Add me to the Required Staff List'
                                data-user-id=activeUser.id
                            ) Require Me
                        h5 Staff


                .row.my-1
                    label.col-form-label.col-lg(for="scene_staff_count") Total Staff Count
                        span.ms-1.text-danger *
                    .col-lg-5
                        .input-group.input-group-sm#scene_staff_count
                            input.form-control.scene-user-count#scene_staff_count_min(type="number" placeholder="Min" name="scene[staff_count_min]" value=scene.staff_count_min)
                            .input-group-text to
                            input.form-control.scene-user-count#scene_staff_count_max(type="number" placeholder="Max" name="scene[staff_count_max]" value=scene.staff_count_max)
                .row.my-1
                    label.col-form-label.col-lg(for="scene_combat_staff_count") Combat Staff Count
                    .col-lg-5
                        .input-group.input-group-sm#scene_combat_staff_count
                            input.form-control#scene_combat_staff_count_min(type="number" placeholder="Min" name="scene[combat_staff_count_min]" value=scene.combat_staff_count_min)
                            .input-group-text to
                            input.form-control#scene_combat_staff_count_min(type="number" placeholder="Max" name="scene[combat_staff_count_max]" value=scene.combat_staff_count_max)
                ul.my-1.list-group.scene-user-list#scene-staff-list
                    each user in scene.users
                        if user.type !== 'player'
                            +sceneUserInput(user, user.scene_request_status, user.scene_schedule_status)
                .input-group
                    select.form-select.complex-search-select2.scene-user-picker#scene-staff-picker(data-placeholder='Staff')
                        option
                        each user in users
                            if user.type !== 'player'
                                -
                                    const type = capitalize(user.typeForDisplay);
                                    let tagString = user.tags.length?'<br>':'';
                                    for (const tag of user.tags){
                                        tagString += `<span class="badge text-bg-info mx-1">${tag.name}</span>`
                                    }
                                option(
                                    value=user.id
                                    data-type=type
                                    data-user=user
                                    title=user.name
                                    data-text=`${user.name} <span class="badge text-bg-primary ms-1">${type}</span>`
                                    data-html=`<span class="text-primary"><strong>${type}</strong>:</span> ${user.name}${tagString}`
                                    data-search=`${user.name} ${type} ${_.pluck(user.tags, 'name').join(' ')}`
                                ) #{capitalize(user.name)} (#{type})
                    button.btn.btn-outline-dark.add-user-btn Request

        if currentCampaign.schedule_players
            .row.mb-3
                .col
                    h5 Sources &amp; Skills

                    ul.my-1#scene-source-list.list-group
                        each source in scene.sources
                            +sceneSourceInput(source, source.scene_request_status, source.scene_schedule_status)
                        each skill in scene.skills
                            +sceneSkillInput(skill, skill.scene_request_status, skill.scene_schedule_status)
                    +sceneSourceInput({id:'new', type:{name:'placeholder'}}, 'requested', 'unscheduled')
                    +sceneSkillInput({id:'new', source:{name:'placeholder'}}, 'requested', 'unscheduled')
                    .input-group
                        select.form-select.complex-select2#scene-source-picker(data-placeholder='Source')
                            option
                            each source in sources
                                if !source.required
                                    - const type = capitalize(source.type.name)
                                    option(
                                        value=source.id
                                        data-type=type
                                        data-source=source
                                        title=source.name
                                        data-text=`${source.name} <span class="badge text-bg-primary ms-1">${type}</span>`
                                        data-html=`<span class="text-primary"><strong>${type}</strong>:</span> ${source.name}`
                                    ) #{capitalize(source.name)} (#{type})
                        button.btn.btn-outline-dark#add-source-btn Request
                    .input-group.mt-1
                        select.form-select.complex-select2#scene-skill-picker(data-placeholder='Skill')
                            option
                            each skill in skills
                                if !skill.required
                                    option(
                                        value=skill.id
                                        data-skill=skill
                                        data-source=skill.source.name
                                        title=skill.name
                                        data-text=`${skill.name} <span class="badge text-bg-primary ms-1">${skill.source.name}</span>`
                                        data-html=`<span class="text-primary"><strong>${skill.source.name}</strong>:</span> ${skill.name}`
                                    ) #{skill.name} (#{skill.source.name})
                        button.btn.btn-outline-dark#add-skill-btn Request
.row.my-2
    .col
        button.btn.btn-primary(type="submit")= scene.id?'Update':'Create'
        if scene.id
            a.btn.btn-secondary.mx-2(href=`/scene/new?clone=${scene.id}`) Clone
        if backto && backto === 'scene' && scene.id
            a.btn.btn-link(href=`/scene/${scene.id}`) Cancel
        else
            a.btn.btn-link(href="/scene") Cancel
